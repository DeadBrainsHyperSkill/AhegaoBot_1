package discordmarket

import (
	"fmt"
	"math/rand"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/bwmarrin/discordgo"
)

const (
	dayAsSec        int64 = 86400
	hoursAsSec      int64 = 3600
	DefaultPanel          = 0
	ProfilePanel          = 1
	MarketPanel           = 2
	ReactionPanel         = 3
	CreateRolePanel       = 4
)

type Bot struct {
	Cfg            *Config
	MarketData     Database
	LotterySession *Lottery
}

type Lottery struct {
	Participants []string
	Expires      time.Time
}

type CreateRoleUser struct {
	UserId    string
	RoleColor int
	Duration  int64
}

var userIdMsgIdDict map[string]string = make(map[string]string)

var panelsCalledUsers = []string{}

var createRoleUsers = []CreateRoleUser{}

var setStatusUsers = []string{}

func openMainPanel(s *discordgo.Session, i *discordgo.InteractionCreate, t discordgo.InteractionResponseType) {

	openCustomPanel(s, i, t, &discordgo.MessageEmbed{
		Title:       "–ü–∞–Ω–µ–ª—å",
		Description: "> **–¢–∏–ø:**‚†Ä`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è`\n\n> **–í–µ—Ä—Å–∏—è:**‚†Ä`1.0`",
		Image:       &discordgo.MessageEmbedImage{URL: "https://cdn.discordapp.com/attachments/838477787877998624/838477959131430912/AhegaoWelcome.gif"},
		Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/858719063316496394/gear.gif"},
	},
		[]*discordgo.Button{{
			Label:    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä–ü—Ä–æ—Ñ–∏–ª—å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
			Style:    discordgo.PrimaryButton,
			Disabled: false,
			CustomID: "–ü—Ä–æ—Ñ–∏–ª—å",
			Emoji:    discordgo.ComponentEmoji{Name: "üìÅ"},
		}, {
			Label:    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä–ú–∞—Ä–∫–µ—Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
			Style:    discordgo.SuccessButton,
			Disabled: false,
			CustomID: "–ú–∞—Ä–∫–µ—Ç",
			Emoji:    discordgo.ComponentEmoji{Name: "üõí"},
		}}, DefaultPanel)
}

func openCustomPanel(s *discordgo.Session, i *discordgo.InteractionCreate, t discordgo.InteractionResponseType, embed *discordgo.MessageEmbed, btns []*discordgo.Button, panelType int) {

	var row discordgo.ActionsRow
	var components []discordgo.MessageComponent

	if !strings.Contains(embed.Title, "–ü–∞–Ω–µ–ª—å") {
		row.Components = append(row.Components, discordgo.Button{
			Label:    "‚†Ä‚†Ä‚†Ä<<‚†Ä‚†Ä‚†Ä‚†Ä",
			Style:    discordgo.SecondaryButton,
			Disabled: false,
			CustomID: "<<",
			Emoji:    discordgo.ComponentEmoji{Name: "‚öôÔ∏è"},
		})
	}

	j := 0
	for i := 2; i < len(btns)+2; i++ {
		if panelType == CreateRolePanel && i == 2 {
			components = append(components, row)
			row.Components = nil
		}
		row.Components = append(row.Components, btns[j])
		j++
		if panelType == CreateRolePanel && (i == 6 || i == 11 || i == 16 || i == 17) {
			components = append(components, row)
			row.Components = nil
			continue
		}
		if panelType == ProfilePanel && (i == 2 || i == 5 || i == 7) {
			components = append(components, row)
			row.Components = nil
			continue
		}
		if panelType == ReactionPanel && (i == 4 || i == 9 || i == 14 || i == 19 || i == 24) {
			components = append(components, row)
			row.Components = nil
			continue
		}
		if (i%5 == 0 && i >= 5 || i == len(btns)+1 && i >= 5) && panelType != CreateRolePanel || panelType == MarketPanel && i == 3 {
			if panelType == MarketPanel && i == 5 {
				continue
			}
			if panelType == ReactionPanel {
				continue
			}
			components = append(components, row)
			row.Components = nil
		}
	}
	if row.Components != nil {
		components = append(components, row)
	}

	if embed.Color == 0 {
		embed.Color = 3092790
	}
	embed.Footer = &discordgo.MessageEmbedFooter{
		IconURL: i.Member.User.AvatarURL("128"),
		Text:    fmt.Sprintf("%v ¬∑ %v", i.Member.User.Username, i.Member.User.ID),
	}
	s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
		Type: t,
		Data: &discordgo.InteractionResponseData{
			Embeds:     []*discordgo.MessageEmbed{embed},
			Components: components,
		},
	})
}

func (b *Bot) openPackPanel(s *discordgo.Session, i *discordgo.InteractionCreate, embed *discordgo.MessageEmbed) {

	var userID = i.Member.User.ID

	lbxsAmount, err := b.MarketData.LootboxAmount(userID)
	if err != nil {
		s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get customer's lootbox amount info")
		return
	}

	isBtnOpenPackDisabled := true
	if lbxsAmount != 0 {
		isBtnOpenPackDisabled = false
	}

	isBtnBuyPackDisabled := true
	if isEnoughCurrency, _, err := b.isEnoughCurrency(userID, b.Cfg.LootboxPrice); isEnoughCurrency {
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user balance")
			return
		}
		isBtnBuyPackDisabled = false
	}

	embed.Title = "–ü–∞–∫–∏"
	embed.Description += fmt.Sprintf("\n\n> **–ü–∞–∫–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏:**\n\n%v `%v` ", b.Cfg.EmojiLootbox, lbxsAmount)
	openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, embed,
		[]*discordgo.Button{{
			Label:    "‚†Ä–û—Ç–∫—Ä—ã—Ç—å‚†Ä ‚†Ä",
			Style:    discordgo.PrimaryButton,
			Disabled: isBtnOpenPackDisabled,
			CustomID: "–û—Ç–∫—Ä—ã—Ç—å –ü–∞–∫",
			Emoji:    discordgo.ComponentEmoji{ID: "854346864211656705"},
		}, {
			Label:    "‚†Ä ‚†Ä–ö—É–ø–∏—Ç—å‚†Ä ‚†Ä",
			Style:    discordgo.DangerButton,
			Disabled: isBtnBuyPackDisabled,
			CustomID: "–ö—É–ø–∏—Ç—å –ü–∞–∫",
			Emoji:    discordgo.ComponentEmoji{ID: "854346916593795092"},
		}}, DefaultPanel)
}

func (b *Bot) addChannels(s *discordgo.Session, i *discordgo.InteractionCreate, textChannelID string, voiceChannelID string, ch chan map[string]string) {

	userId := i.Member.User.ID

	channels := make(map[string]string)

	if textChannelID == "" {

		category, err := s.GuildChannelCreate(i.GuildID, i.Member.User.Username, discordgo.ChannelTypeGuildCategory)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Error creating category channel")
			return
		}
		channels["categoryChannel"] = category.Name

		textChannel, err := s.GuildChannelCreateComplex(i.GuildID, discordgo.GuildChannelCreateData{Name: "„Äéüí¨„Äè—Å–æ–æ–±—â–µ–Ω–∏—è", Type: discordgo.ChannelTypeGuildText, ParentID: category.ID})
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Error creating text channel")
			return
		}
		channels["textChannel"] = textChannel.Mention()

		voiceChannel, err := s.GuildChannelCreateComplex(i.GuildID, discordgo.GuildChannelCreateData{Name: "„Äéüé§„Äè–≥–æ–ª–æ—Å", Type: discordgo.ChannelTypeGuildVoice, ParentID: category.ID})
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Error creating voice channel")
			return
		}
		channels["voiceChannel"] = voiceChannel.Mention()

		ch <- channels
		s.ChannelMessageSend("859539629048856578", fmt.Sprintf("!–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å %v %v", userId, voiceChannel.ID))
		err = s.ChannelPermissionSet(textChannel.ID, i.Member.User.ID, discordgo.PermissionOverwriteTypeMember, 805829713, 0)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Error setting permissions to text channel")
			return
		}
		err = s.ChannelPermissionSet(voiceChannel.ID, i.Member.User.ID, discordgo.PermissionOverwriteTypeMember, 334497553, 0)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Error setting permissions to voice channel")
			return
		}
		role, err := s.GuildRoleCreate(i.GuildID)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Error creating role")
			return
		}
		_, err = s.GuildRoleEdit(i.GuildID, role.ID, i.Member.User.Username, 8357810, false, 0, false)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Error editing role")
			return
		}
		guild, err := s.Guild(i.GuildID)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Error getting guild")
			return
		}
		spacesRolePosition := 0
		for _, v := range guild.Roles {
			if v.ID == "836937639831142401" {
				spacesRolePosition = v.Position
			}
		}
		for _, v := range guild.Roles {
			if v.ID == role.ID {
				v.Position = spacesRolePosition + 1
			}
		}
		_, err = s.GuildRoleReorder(i.GuildID, guild.Roles)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Error editing role")
			return
		}
		err = s.GuildMemberRoleAdd(i.GuildID, userId, role.ID)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Error adding role")
			return
		}
		err = s.GuildMemberRoleAdd(i.GuildID, userId, "836937639831142401")
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Error adding role")
			return
		}
		err = b.MarketData.CustomerChannelsAdd(userId, textChannel.ID, voiceChannel.ID, role.ID, false)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to add user's channels")
			return
		}
	} else {
		textChannel, err := s.Channel(textChannelID)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Error getting text channel in guild")
			return
		}
		channels["textChannel"] = textChannel.Mention()
		voiceChannel, err := s.Channel(voiceChannelID)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Error getting voice channel in guild")
			return
		}
		channels["voiceChannel"] = voiceChannel.Mention()
		category, err := s.Channel(textChannel.ParentID)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Error getting category in guild")
			return
		}
		channels["categoryChannel"] = category.Name
		err = b.MarketData.CustomerChannelsAdd(userId, "", "", "", true)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to add user's channels")
			return
		}
		ch <- channels
	}
}
func (b *Bot) OnMessegeReceive(s *discordgo.Session, m *discordgo.MessageCreate) {

	userId := m.Author.ID
	msgHasEmbeds := len(m.Embeds) != 0
	msgHasFooter := false
	if msgHasEmbeds && m.Embeds[0].Footer != nil && strings.Contains(m.Embeds[0].Footer.Text, " ¬∑ ") {
		msgHasFooter = true
	}
	for i, v := range panelsCalledUsers {
		if msgHasEmbeds && msgHasFooter {
			if v == strings.Split(m.Embeds[0].Footer.Text, " ¬∑ ")[1] {
				userIdMsgIdDict[strings.Split(m.Embeds[0].Footer.Text, " ¬∑ ")[1]] = m.Message.ID
				panelsCalledUsers[i] = panelsCalledUsers[len(panelsCalledUsers)-1]
				panelsCalledUsers = panelsCalledUsers[:len(panelsCalledUsers)-1]
				return
			}
		}
	}

	for i, v := range setStatusUsers {
		if v == userId {
			if len(m.Message.Content) > 100 {
				s.ChannelMessageSendEmbed(b.Cfg.LotteryChannelID,
					&discordgo.MessageEmbed{
						Title:       "–°—Ç–∞—Ç—É—Å",
						Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/866316842879811584/status.png"},
						Description: "*–î–ª–∏–Ω–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 100 —Å–∏–º–≤–æ–ª–æ–≤!*\n\n*–û–∂–∏–¥–∞—é –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞, –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.*",
						Footer: &discordgo.MessageEmbedFooter{
							IconURL: m.Author.AvatarURL("128"),
							Text:    fmt.Sprintf("%v ¬∑ %v", m.Author.Username, userId),
						},
					})
			} else {
				setStatusUsers[i] = setStatusUsers[len(setStatusUsers)-1]
				setStatusUsers = setStatusUsers[:len(setStatusUsers)-1]
				err := b.MarketData.CustomerStatusUpdate(userId, m.Message.Content, b.Cfg.StatusPrice)
				if err != nil {
					s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to update customer's status")
					return
				}
				s.ChannelMessageSendEmbed(b.Cfg.LotteryChannelID,
					&discordgo.MessageEmbed{
						Title:       "–°—Ç–∞—Ç—É—Å",
						Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/866316842879811584/status.png"},
						Description: fmt.Sprintf("> **–°—Ç–∞—Ç—É—Å:**\n```fix\n%v```\n*–ó–∞–≥–ª—è–Ω–∏ —Å–∫–æ—Ä–µ–µ –≤ –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ —ç—Ç–æ–º.*\n\n*–°–µ—Å—Ç–∏—á–∫–∞ —è–≤–Ω–æ –Ω–µ–¥–æ–æ—Ü–µ–Ω–∏–ª–∞ –±—Ä–∞—Ç–∏–∫–∞ –≤ —Ñ–∞–Ω—Ç–∞–∑–∏–∏...*", m.Message.Content),
						Footer: &discordgo.MessageEmbedFooter{
							IconURL: m.Author.AvatarURL("128"),
							Text:    fmt.Sprintf("%v ¬∑ %v", m.Author.Username, userId),
						},
					})
			}
			return
		}
	}
	for i, v := range createRoleUsers {
		if v.UserId == userId {
			if len(m.Message.Content) > 100 {
				s.ChannelMessageSendEmbed(b.Cfg.LotteryChannelID,
					&discordgo.MessageEmbed{
						Color:       3092790,
						Title:       "–†–æ–ª–∏",
						Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/858704257402404904/icon_role_create.png"},
						Description: "*–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –Ω–µ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –±–æ–ª—å—à–µ 100 —Å–∏–º–≤–æ–ª–æ–≤!*\n\n*–û–∂–∏–¥–∞—é –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–∏, –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.*",
						Footer: &discordgo.MessageEmbedFooter{
							IconURL: m.Author.AvatarURL("128"),
							Text:    fmt.Sprintf("%v ¬∑ %v", m.Author.Username, userId),
						},
					})
			} else {
				randImage := randSlice([]string{
					"https://cdn.discordapp.com/attachments/838477787877998624/858703916555698196/role.gif",
					"https://cdn.discordapp.com/attachments/838477787877998624/858703919718989844/role1.gif",
					"https://cdn.discordapp.com/attachments/838477787877998624/858703921458970645/role2.gif",
					"https://cdn.discordapp.com/attachments/838477787877998624/858703924038598686/role3.gif",
					"https://cdn.discordapp.com/attachments/838477787877998624/858703925662056508/role4.gif",
					"https://cdn.discordapp.com/attachments/838477787877998624/858704180276625438/role6.gif",
					"https://cdn.discordapp.com/attachments/838477787877998624/858703907211706388/role7.gif",
					"https://cdn.discordapp.com/attachments/838477787877998624/858703908607361024/role8.gif",
					"https://cdn.discordapp.com/attachments/838477787877998624/858703909321441290/role9.gif",
					"https://cdn.discordapp.com/attachments/838477787877998624/858703914077519872/role10.gif",
				})

				createRoleUsers[i] = createRoleUsers[len(createRoleUsers)-1]
				createRoleUsers = createRoleUsers[:len(createRoleUsers)-1]
				role, err := s.GuildRoleCreate(m.GuildID)
				if err != nil {
					s.ChannelMessageSend(b.Cfg.AlertChannel, "Error creating role")
					return
				}
				role, err = s.GuildRoleEdit(m.GuildID, role.ID, m.Message.Content, v.RoleColor, false, 0, false)
				if err != nil {
					s.ChannelMessageSend(b.Cfg.AlertChannel, "Error editing role")
					return
				}
				s.ChannelMessageSendEmbed(b.Cfg.LotteryChannelID,
					&discordgo.MessageEmbed{
						Color:       3092790,
						Title:       "–†–æ–ª–∏",
						Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/858704257402404904/icon_role_create.png"},
						Image:       &discordgo.MessageEmbedImage{URL: randImage},
						Description: fmt.Sprintf("*–û–æ–æ, –¥–∞!*\n\n*–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ä–æ–ª—å:*\n\n%v\n\n*–û–Ω–∏-—á–∞–Ω, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –∏—Å–∫–∞—Ç—å —Ç—è–Ω–æ—á–∫—É!*", role.Mention()),
						Footer: &discordgo.MessageEmbedFooter{
							IconURL: m.Author.AvatarURL("128"),
							Text:    fmt.Sprintf("%v ¬∑ %v", m.Author.Username, userId),
						},
					})
				var value int
				switch int(v.Duration / dayAsSec) {
				case 1:
					value = -1500
				case 3:
					value = -3900
				case 7:
					value = -8100
				case 31:
					value = -30000
				}
				err = b.MarketData.BalanceUpdate(userId, value)
				if err != nil {
					s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to update user's balance")
				}
				err = b.MarketData.CustomRoleAdd(role.ID, m.Message.Content, userId, time.Now().Unix()+v.Duration)
				if err != nil {
					s.ChannelMessageSend(b.Cfg.AlertChannel, "Error adding custom role")
					return
				}
				err = b.roleGive(s, m.GuildID, userId, role.ID)
				if err != nil {
					s.ChannelMessageSend(b.Cfg.AlertChannel, "Error giving role")
					return
				}
				guild, err := s.Guild(m.GuildID)
				if err != nil {
					s.ChannelMessageSend(b.Cfg.AlertChannel, "Error getting guild")
					return
				}
				pos := 0
				for _, v := range guild.Roles {
					if v.ID == "834432874945839160" {
						pos = v.Position
						break
					}
				}
				for _, v := range guild.Roles {
					if v.ID == role.ID {
						v.Position = pos
						break
					}
				}
				_, err = s.GuildRoleReorder(m.GuildID, guild.Roles)
				if err != nil {
					s.ChannelMessageSend(b.Cfg.AlertChannel, "Error editing role")
					return
				}
				err = s.GuildMemberRoleAdd(m.GuildID, userId, role.ID)
				if err != nil {
					s.ChannelMessageSend(b.Cfg.AlertChannel, "Error adding role")
					return
				}
				err = s.GuildMemberRoleAdd(m.GuildID, userId, "836937639831142401")
				if err != nil {
					s.ChannelMessageSend(b.Cfg.AlertChannel, "Error adding role")
					return
				}
			}
			return
		}
	}
}
func (b *Bot) OnInteractionAct(s *discordgo.Session, i *discordgo.InteractionCreate) {

	var userId = i.Member.User.ID

	if i.Type == discordgo.InteractionApplicationCommand {
		if i.ApplicationCommandData().Name == "–ø–∞–Ω–µ–ª—å" {
			if i.ChannelID == "941236439146979378" || i.ChannelID == "836964413298704395" || i.ChannelID == "834432875129733138" || i.ChannelID == "844343580314566696" {
				s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
					Type: discordgo.InteractionResponseChannelMessageWithSource,
					Data: &discordgo.InteractionResponseData{
						Flags:   1 << 6,
						Content: fmt.Sprintf("–í—ã —É–≤–∏–¥–µ–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—ã—Ç–∞–ª–∏—Å—å –≤—ã–∑–≤–∞—Ç—å –ø–∞–Ω–µ–ª—å –≤ –∫–∞–Ω–∞–ª–µ <#%v>\n\n–ü–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à—å –≤ –∫–∞–Ω–∞–ª–µ <#941259025939595305> –ª–∏–±–æ –≤ –ª–∏—á–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ.", i.ChannelID),
					},
				})
				return
			}
			panelsCalledUsers = append(panelsCalledUsers, userId)
			openMainPanel(s, i, discordgo.InteractionResponseChannelMessageWithSource)
		} else if i.ApplicationCommandData().Name == "—Ä–µ–∞–∫—Ü–∏—è" {
			b.reactionBase(s, i)
		}
	}

	if i.Type != discordgo.InteractionMessageComponent {
		return
	}

	if userIdMsgIdDict[userId] != i.Message.ID {
		s.InteractionRespond(i.Interaction, &discordgo.InteractionResponse{
			Type: discordgo.InteractionResponseChannelMessageWithSource,
			Data: &discordgo.InteractionResponseData{
				Flags:   1 << 6,
				Content: "```–í—ã —É–≤–∏–¥–µ–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ –ø—ã—Ç–∞–ª–∏—Å—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —á—É–∂–æ–π –ª–∏–±–æ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ–π –ø–∞–Ω–µ–ª—å—é.```\n__–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤—ã–∑–≤–∞—Ç—å –Ω–æ–≤—É—é –ø–∞–Ω–µ–ª—å –∫–æ–º–∞–Ω–¥–æ–π:__ `/–ø–∞–Ω–µ–ª—å`",
			},
		})
		return
	}

	var customId = i.MessageComponentData().CustomID

	switch customId {

	case "<<":
		for i, v := range createRoleUsers {
			if v.UserId == userId {
				createRoleUsers[i] = createRoleUsers[len(createRoleUsers)-1]
				createRoleUsers = createRoleUsers[:len(createRoleUsers)-1]
				break
			}
		}
		for i, v := range setStatusUsers {
			if v == userId {
				setStatusUsers[i] = setStatusUsers[len(setStatusUsers)-1]
				setStatusUsers = setStatusUsers[:len(setStatusUsers)-1]
				break
			}
		}
		openMainPanel(s, i, discordgo.InteractionResponseUpdateMessage)
	case "–§–∞—Ä–º":

		randImage := randSlice([]string{
			"https://cdn.discordapp.com/attachments/838477787877998624/941081208773828678/farm.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/941081208278909059/farm2.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/941082016848424960/farm3.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/941082017410474084/farm4.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/941082015581733044/farm5.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/941082016231870526/farm6.gif",
		})

		nextFarmTime := time.Now().Add(12 * time.Hour).Unix()
		minUntilFarm := time.Until(time.Unix(nextFarmTime, 0)).Minutes()
		hours := int(minUntilFarm) / 60
		mins := int(minUntilFarm) - hours*60
		err := b.MarketData.Farm(userId, b.Cfg.FarmRate, nextFarmTime)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Can not update user's farm data")
			return
		}

		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:       "–§–∞—Ä–º",
			Image:       &discordgo.MessageEmbedImage{URL: randImage},
			Description: fmt.Sprintf("*–¢—ã —É—Å–ø–µ—à–Ω–æ —É–∫—Ä–∞–ª —É —Å–µ—Å—Ç—Ä–∏—á–∫–∏ `%v` %s\n\n–û–Ω–∏-—á–∞–Ω, –ø—Ä–∏—Ö–æ–¥–∏ —á–µ—Ä–µ–∑ `%v` —á–∞—Å. `%v` –º–∏–Ω.*", b.Cfg.FarmRate, b.Cfg.Currency, hours, mins),
			Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/853796492476809226/mining_trusiki.png"},
		}, nil, DefaultPanel)

	case "–ü—Ä–æ—Ñ–∏–ª—å":

		balance, err := b.MarketData.Balance(userId)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user balance")
			return
		}

		nextFarmTime, err := b.MarketData.NextFarm(userId)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user's farm data")
			return
		}

		btnLabel := "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä –§–∞—Ä–º ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä"
		isBtnFarmDisabled := false
		if nextFarmTime > time.Now().Unix() {
			minUntilFarm := time.Until(time.Unix(nextFarmTime, 0)).Minutes()
			hours := int(minUntilFarm) / 60
			mins := int(minUntilFarm) - hours*60
			isBtnFarmDisabled = true
			btnLabel = fmt.Sprintf("‚†Ä‚†Ä%v:%v‚†Ä‚†Ä", hours, mins)
		}

		status, voiceT, spent, lbxs, err := b.MarketData.CustomerProfileData(userId)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get customer's profile info")
			return
		}

		isBtnSetStatusDisabled := true
		if balance >= b.Cfg.StatusPrice {
			isBtnSetStatusDisabled = false
		}
		if status == "" {
			status = "–°—Ç–∞—Ç—É—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
		}

		var r, e int
		is, err := b.MarketData.UserOrders(userId)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user's items")
			return
		}

		for _, i := range is {
			if i.Product.Type == "role" {
				r += 1
			} else if i.Product.Type == "reaction" {
				e += 1
			}
		}

		hasSpace := "–ù–µ—Ç"
		textChannelID, _, _, _, err := b.MarketData.HasCustomerChannels(userId)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user's channels")
			return
		}
		if textChannelID != "" {
			hasSpace = "–ï—Å—Ç—å"
		}

		hasTicket := "–ù–µ—Ç"
		for _, v := range b.LotterySession.Participants {
			if v == userId {
				hasTicket = "–ï—Å—Ç—å"
				break
			}
		}

		isBtnManageRolesDisabled, err := b.MarketData.HasRoles(userId)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user's roles")
			return
		}
		isBtnManageRolesDisabled = !isBtnManageRolesDisabled

		gamesEmoji := ""
		genderEmoji := ""
		isFemale := false
		isMale := false

		u, err := s.GuildMember(b.Cfg.GuildID, userId)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user")
			return
		}
		for _, roleID := range u.Roles {
			if roleID == "836888796443574313" {
				gamesEmoji += "<:cs_go:941493420541763654>‚†Ä"
			} else if roleID == "836883811782361109" {
				gamesEmoji += "<:dota_2:941493420705329152>‚†Ä"
			} else if roleID == "836884309985067070" {
				gamesEmoji += "<:lol:941493420663382087>‚†Ä"
			}
			if roleID == "834432874928799767" {
				isFemale = true
				genderEmoji = "‚ôÄÔ∏è"
			} else if roleID == "836723670813638677" {
				isMale = true
				genderEmoji = "‚ôÇÔ∏è"
			}
		}
		if !isFemale && !isMale {
			genderEmoji = "‚ùì"
		}
		if gamesEmoji == "" {
			gamesEmoji = "`–ù–µ—Ç`"
		}
		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:     "–ü—Ä–æ—Ñ–∏–ª—å",
			Thumbnail: &discordgo.MessageEmbedThumbnail{URL: i.Member.User.AvatarURL("128")},
			Fields: []*discordgo.MessageEmbedField{
				{
					Name:   "> –ë–∞–ª–∞–Ω—Å:",
					Value:  fmt.Sprintf("`%v` %v", balance, b.Cfg.Currency),
					Inline: true,
				},
				{
					Name:   "> –ì–µ–Ω–¥–µ—Ä:",
					Value:  genderEmoji,
					Inline: true,
				},
				{
					Name:   "> –ì–µ–π–º–∏–Ω–≥:",
					Value:  gamesEmoji,
					Inline: true,
				},
				{
					Name:  "> –°—Ç–∞—Ç—É—Å:",
					Value: fmt.Sprintf("```fix\n%s ```", status),
				},
				{
					Name:  "> –ü—Ä–æ–≤–µ–¥–µ–Ω–æ —á–∞—Å–æ–≤ –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö:",
					Value: fmt.Sprintf("```ini\n[ %d ]```", voiceT/hoursAsSec),
				},
				{
					Name:   "–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:",
					Value:  fmt.Sprintf(" **%d** %s", spent, b.Cfg.Currency),
					Inline: true,
				},
				{
					Name: "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:",
					Value: fmt.Sprintf("%v `%v`  %v `%v`  %v `%v`  %v `%v`  %v `%v`", b.Cfg.EmojiPrivateChannel, hasSpace, b.Cfg.EmojiRole, r, b.Cfg.EmojiReaction,
						e, b.Cfg.EmojiLootbox, lbxs, b.Cfg.EmojiLottery, hasTicket),
					Inline: true,
				},
			},
		},
			[]*discordgo.Button{{
				Label:    btnLabel,
				Style:    discordgo.SuccessButton,
				Disabled: isBtnFarmDisabled,
				Emoji:    discordgo.ComponentEmoji{ID: "843056414602952734"},
				CustomID: "–§–∞—Ä–º",
			}, {
				Label:    "‚†Ä ‚†Ä–°—Ç–∞—Ç—É—Å‚†Ä‚†Ä",
				Style:    discordgo.PrimaryButton,
				Disabled: isBtnSetStatusDisabled,
				Emoji:    discordgo.ComponentEmoji{Name: "üè∑Ô∏è"},
				CustomID: "–°—Ç–∞—Ç—É—Å",
			}, {
				Label:    "‚†Ä‚†Ä –ò–≥—Ä–æ–≤—ã–µ –†–æ–ª–∏‚†Ä‚†Ä‚†Ä",
				Style:    discordgo.PrimaryButton,
				Disabled: false,
				Emoji:    discordgo.ComponentEmoji{Name: "üéÆ"},
				CustomID: "–ò–≥—Ä–æ–≤—ã–µ –†–æ–ª–∏",
			},
				{
					Label:    "‚†Ä‚†Ä‚†Ä–ì–µ–Ω–¥–µ—Ä‚†Ä‚†Ä‚†Ä",
					Style:    discordgo.PrimaryButton,
					Disabled: false,
					Emoji:    discordgo.ComponentEmoji{ID: "941485792096833536"},
					CustomID: "–ì–µ–Ω–¥–µ—Ä",
				}, {
					Label:    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä–ú–∞—Ä–∫–µ—Ç –¢–æ–ø-10‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
					Style:    discordgo.DangerButton,
					Disabled: false,
					Emoji:    discordgo.ComponentEmoji{Name: "üíπ"},
					CustomID: "–¢–æ–ø –ú–∞—Ä–∫–µ—Ç",
				}, {
					Label:    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä –í–æ–π—Å –¢–æ–ø-10‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
					Style:    discordgo.DangerButton,
					Disabled: false,
					Emoji:    discordgo.ComponentEmoji{Name: "üé§"},
					CustomID: "–¢–æ–ø –í–æ–π—Å",
				}, {
					Label:    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –†–æ–ª—è–º–∏ ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä",
					Style:    discordgo.SecondaryButton,
					Disabled: isBtnManageRolesDisabled,
					Emoji:    discordgo.ComponentEmoji{Name: "üîß"},
					CustomID: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –†–æ–ª—è–º–∏",
				}}, ProfilePanel)
	case "–°—Ç–∞—Ç—É—Å":
		setStatusUsers = append(setStatusUsers, userId)
		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:       "–°—Ç–∞—Ç—É—Å",
			Description: "*–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª–µ.*\n\n**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n\n> *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤:* `100`\n\n> *–ö–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ –Ω–µ –ø—Ä–∏–µ–º–ª–µ–º—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –∏ —Å–∏–º–≤–æ–ª—ã [–Æ–Ω–∏–∫–æ–¥–∞](https://unicode-table.com/ru/).*\n\n*–û–∂–∏–¥–∞—é –≤–≤–æ–¥–∞, –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.*",
			Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/866316842879811584/status.png"},
		}, nil, DefaultPanel)
	case "–ì–µ–Ω–¥–µ—Ä":
		genderEmoji := ""
		isBtnFemaleDisabled := false
		isBtnMaleDisabled := false

		u, err := s.GuildMember(b.Cfg.GuildID, userId)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user")
			return
		}

		for _, roleID := range u.Roles {
			if roleID == "834432874928799767" {
				isBtnFemaleDisabled = true
				genderEmoji = "‚ôÄÔ∏è"
			} else if roleID == "836723670813638677" {
				isBtnMaleDisabled = true
				genderEmoji = "‚ôÇÔ∏è"
			}
		}
		if !isBtnFemaleDisabled && !isBtnMaleDisabled {
			genderEmoji = "‚ùì"
		}
		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:       "–ì–µ–Ω–¥–µ—Ä",
			Description: fmt.Sprintf("*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏. –ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ä–æ–ª—å, –∫–ª–∏–∫–Ω–∏—Ç–µ‚†Äüö´*\n\n<@&834432874928799767> ***‚Äî –¥–µ–≤—É—à–∫–∞.***\n<@&836723670813638677> ***‚Äî –ø–∞—Ä–µ–Ω—å.\n\n> –¢–µ–∫—É—â–∏–π –≥–µ–Ω–¥–µ—Ä:‚†Ä%v***", genderEmoji),
		}, []*discordgo.Button{{
			Label:    "",
			Style:    discordgo.PrimaryButton,
			Disabled: isBtnFemaleDisabled,
			Emoji:    discordgo.ComponentEmoji{Name: "‚ôÄÔ∏è"},
			CustomID: "–¢—è–Ω",
		}, {
			Label:    "",
			Style:    discordgo.PrimaryButton,
			Disabled: isBtnMaleDisabled,
			Emoji:    discordgo.ComponentEmoji{Name: "‚ôÇÔ∏è"},
			CustomID: "–ö—É–Ω",
		}, {
			Label:    "",
			Style:    discordgo.DangerButton,
			Disabled: !isBtnFemaleDisabled && !isBtnMaleDisabled,
			Emoji:    discordgo.ComponentEmoji{Name: "üö´"},
			CustomID: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",
		}}, DefaultPanel)
	case "–¢—è–Ω":
		u, err := s.GuildMember(b.Cfg.GuildID, userId)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user")
			return
		}
		for _, roleID := range u.Roles {
			if roleID == "836723670813638677" {
				err := s.GuildMemberRoleRemove(b.Cfg.GuildID, userId, "836723670813638677")
				if err != nil {
					s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to remove the role to the user")
					return
				}
			}
		}
		err = s.GuildMemberRoleAdd(b.Cfg.GuildID, userId, "834432874928799767")
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to assign the role to the user")
			return
		}
		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:       "–ì–µ–Ω–¥–µ—Ä",
			Description: "*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏. –ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ä–æ–ª—å, –∫–ª–∏–∫–Ω–∏—Ç–µ‚†Äüö´*\n\n<@&834432874928799767> ***‚Äî –¥–µ–≤—É—à–∫–∞.***\n<@&836723670813638677> ***‚Äî –ø–∞—Ä–µ–Ω—å.\n\n> –¢–µ–∫—É—â–∏–π –≥–µ–Ω–¥–µ—Ä:‚†Ä‚ôÄÔ∏è***",
		}, []*discordgo.Button{{
			Label:    "",
			Style:    discordgo.PrimaryButton,
			Disabled: true,
			Emoji:    discordgo.ComponentEmoji{Name: "‚ôÄÔ∏è"},
			CustomID: "–¢—è–Ω",
		}, {
			Label:    "",
			Style:    discordgo.PrimaryButton,
			Disabled: false,
			Emoji:    discordgo.ComponentEmoji{Name: "‚ôÇÔ∏è"},
			CustomID: "–ö—É–Ω",
		}, {
			Label:    "",
			Style:    discordgo.DangerButton,
			Disabled: false,
			Emoji:    discordgo.ComponentEmoji{Name: "üö´"},
			CustomID: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",
		}}, DefaultPanel)
	case "–ö—É–Ω":
		u, err := s.GuildMember(b.Cfg.GuildID, userId)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user")
			return
		}
		for _, roleID := range u.Roles {
			if roleID == "834432874928799767" {
				err := s.GuildMemberRoleRemove(b.Cfg.GuildID, userId, "834432874928799767")
				if err != nil {
					s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to remove the role to the user")
					return
				}
			}
		}
		err = s.GuildMemberRoleAdd(b.Cfg.GuildID, userId, "836723670813638677")
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to assign the role to the user")
			return
		}
		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:       "–ì–µ–Ω–¥–µ—Ä",
			Description: "*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏. –ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ä–æ–ª—å, –∫–ª–∏–∫–Ω–∏—Ç–µ‚†Äüö´*\n\n<@&834432874928799767> ***‚Äî –¥–µ–≤—É—à–∫–∞.***\n<@&836723670813638677> ***‚Äî –ø–∞—Ä–µ–Ω—å.\n\n> –¢–µ–∫—É—â–∏–π –≥–µ–Ω–¥–µ—Ä:‚†Ä‚ôÇÔ∏è***",
		}, []*discordgo.Button{{
			Label:    "",
			Style:    discordgo.PrimaryButton,
			Disabled: false,
			Emoji:    discordgo.ComponentEmoji{Name: "‚ôÄÔ∏è"},
			CustomID: "–¢—è–Ω",
		}, {
			Label:    "",
			Style:    discordgo.PrimaryButton,
			Disabled: true,
			Emoji:    discordgo.ComponentEmoji{Name: "‚ôÇÔ∏è"},
			CustomID: "–ö—É–Ω",
		}, {
			Label:    "",
			Style:    discordgo.DangerButton,
			Disabled: false,
			Emoji:    discordgo.ComponentEmoji{Name: "üö´"},
			CustomID: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",
		}}, DefaultPanel)
	case "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π":
		u, err := s.GuildMember(b.Cfg.GuildID, userId)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user")
			return
		}
		for _, roleID := range u.Roles {
			if roleID == "834432874928799767" {
				err := s.GuildMemberRoleRemove(b.Cfg.GuildID, userId, "834432874928799767")
				if err != nil {
					s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to remove the role to the user")
					return
				}
			} else if roleID == "836723670813638677" {
				err := s.GuildMemberRoleRemove(b.Cfg.GuildID, userId, "836723670813638677")
				if err != nil {
					s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to remove the role to the user")
					return
				}
			}
		}
		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:       "–ì–µ–Ω–¥–µ—Ä",
			Description: "*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏. –ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ä–æ–ª—å, –∫–ª–∏–∫–Ω–∏—Ç–µ‚†Äüö´*\n\n<@&834432874928799767> ***‚Äî –¥–µ–≤—É—à–∫–∞.***\n<@&836723670813638677> ***‚Äî –ø–∞—Ä–µ–Ω—å.\n\n> –¢–µ–∫—É—â–∏–π –≥–µ–Ω–¥–µ—Ä:‚†Ä‚ùì***",
		}, []*discordgo.Button{{
			Label:    "",
			Style:    discordgo.PrimaryButton,
			Disabled: false,
			Emoji:    discordgo.ComponentEmoji{Name: "‚ôÄÔ∏è"},
			CustomID: "–¢—è–Ω",
		}, {
			Label:    "",
			Style:    discordgo.PrimaryButton,
			Disabled: false,
			Emoji:    discordgo.ComponentEmoji{Name: "‚ôÇÔ∏è"},
			CustomID: "–ö—É–Ω",
		}, {
			Label:    "",
			Style:    discordgo.DangerButton,
			Disabled: true,
			Emoji:    discordgo.ComponentEmoji{Name: "üö´"},
			CustomID: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π",
		}}, DefaultPanel)
	case "–ò–≥—Ä–æ–≤—ã–µ –†–æ–ª–∏":
		gamesEmoji := ""
		isBtnDota2Disabled := false
		isBtnLolDisabled := false
		isBtnCsgoDisabled := false

		u, err := s.GuildMember(b.Cfg.GuildID, userId)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user")
			return
		}
		for _, roleID := range u.Roles {
			if roleID == "836883811782361109" {
				isBtnDota2Disabled = true
				gamesEmoji += "<:dota_2:941493420705329152>‚†Ä"
			} else if roleID == "836884309985067070" {
				isBtnLolDisabled = true
				gamesEmoji += "<:lol:941493420663382087>‚†Ä"
			} else if roleID == "836888796443574313" {
				isBtnCsgoDisabled = true
				gamesEmoji += "<:cs_go:941493420541763654>‚†Ä"
			}
		}
		if gamesEmoji == "" {
			gamesEmoji = "`–ù–µ—Ç`"
		}
		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:       "–ò–≥—Ä–æ–≤—ã–µ –†–æ–ª–∏",
			Description: fmt.Sprintf("*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏. –ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ä–æ–ª–∏, –∫–ª–∏–∫–Ω–∏—Ç–µ‚†Äüö´*\n\n<@&836888796443574313>***,*** <@&836884309985067070>***,*** <@&836883811782361109>*** ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –æ–¥–Ω–æ–π –∏–∑ —ç—Ç–∏—Ö —Ä–æ–ª–µ–π –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ ***<#834432875129733138>\n\n> ***–¢–µ–∫—É—â–∏–µ –∏–≥—Ä–æ–≤—ã–µ —Ä–æ–ª–∏:***‚†Ä%v", gamesEmoji),
		}, []*discordgo.Button{{
			Label:    "",
			Style:    discordgo.PrimaryButton,
			Disabled: isBtnDota2Disabled,
			Emoji:    discordgo.ComponentEmoji{ID: "941493420705329152"},
			CustomID: "Dota 2",
		}, {
			Label:    "",
			Style:    discordgo.PrimaryButton,
			Disabled: isBtnLolDisabled,
			Emoji:    discordgo.ComponentEmoji{ID: "941493420663382087"},
			CustomID: "LoL",
		}, {
			Label:    "",
			Style:    discordgo.PrimaryButton,
			Disabled: isBtnCsgoDisabled,
			Emoji:    discordgo.ComponentEmoji{ID: "941493420541763654"},
			CustomID: "CS:GO",
		}, {
			Label:    "",
			Style:    discordgo.DangerButton,
			Disabled: !isBtnCsgoDisabled && !isBtnLolDisabled && !isBtnDota2Disabled,
			Emoji:    discordgo.ComponentEmoji{Name: "üö´"},
			CustomID: "–£–¥–∞–ª–∏—Ç—å –†–æ–ª–∏",
		}}, DefaultPanel)
	case "Dota 2":
		err := s.GuildMemberRoleAdd(b.Cfg.GuildID, userId, "836883811782361109")
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to assign the role to the user")
			return
		}
		gamesEmoji := ""
		isBtnLolDisabled := false
		isBtnCsgoDisabled := false
		isDelimiterRoleAssigned := false

		u, err := s.GuildMember(b.Cfg.GuildID, userId)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user")
			return
		}
		gamesEmoji += "<:dota_2:941493420705329152>‚†Ä"
		for _, roleID := range u.Roles {
			if roleID == "836884309985067070" {
				isBtnLolDisabled = true
				gamesEmoji += "<:lol:941493420663382087>‚†Ä"
			} else if roleID == "836888796443574313" {
				isBtnCsgoDisabled = true
				gamesEmoji += "<:cs_go:941493420541763654>‚†Ä"
			} else if roleID == "836862989872922675" {
				isDelimiterRoleAssigned = true
			}
		}
		if !isDelimiterRoleAssigned {
			err := s.GuildMemberRoleAdd(b.Cfg.GuildID, userId, "836862989872922675")
			if err != nil {
				s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to assign the role to the user")
				return
			}
		}
		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:       "–ò–≥—Ä–æ–≤—ã–µ –†–æ–ª–∏",
			Description: fmt.Sprintf("*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏. –ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ä–æ–ª–∏, –∫–ª–∏–∫–Ω–∏—Ç–µ‚†Äüö´*\n\n<@&836888796443574313>***,*** <@&836884309985067070>***,*** <@&836883811782361109>*** ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –æ–¥–Ω–æ–π –∏–∑ —ç—Ç–∏—Ö —Ä–æ–ª–µ–π –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ ***<#834432875129733138>\n\n> ***–¢–µ–∫—É—â–∏–µ –∏–≥—Ä–æ–≤—ã–µ —Ä–æ–ª–∏:***‚†Ä%v", gamesEmoji),
		}, []*discordgo.Button{{
			Label:    "",
			Style:    discordgo.PrimaryButton,
			Disabled: true,
			Emoji:    discordgo.ComponentEmoji{ID: "941493420705329152"},
			CustomID: "Dota 2",
		}, {
			Label:    "",
			Style:    discordgo.PrimaryButton,
			Disabled: isBtnLolDisabled,
			Emoji:    discordgo.ComponentEmoji{ID: "941493420663382087"},
			CustomID: "LoL",
		}, {
			Label:    "",
			Style:    discordgo.PrimaryButton,
			Disabled: isBtnCsgoDisabled,
			Emoji:    discordgo.ComponentEmoji{ID: "941493420541763654"},
			CustomID: "CS:GO",
		}, {
			Label:    "",
			Style:    discordgo.DangerButton,
			Disabled: false,
			Emoji:    discordgo.ComponentEmoji{Name: "üö´"},
			CustomID: "–£–¥–∞–ª–∏—Ç—å –†–æ–ª–∏",
		}}, DefaultPanel)
	case "LoL":
		err := s.GuildMemberRoleAdd(b.Cfg.GuildID, userId, "836884309985067070")
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to assign the role to the user")
			return
		}
		gamesEmoji := ""
		isBtnDota2Disabled := false
		isBtnCsgoDisabled := false
		isDelimiterRoleAssigned := false

		u, err := s.GuildMember(b.Cfg.GuildID, userId)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user")
			return
		}
		gamesEmoji += "<:lol:941493420663382087>‚†Ä"
		for _, roleID := range u.Roles {
			if roleID == "836883811782361109" {
				isBtnDota2Disabled = true
				gamesEmoji += "<:dota_2:941493420705329152>‚†Ä"
			} else if roleID == "836888796443574313" {
				isBtnCsgoDisabled = true
				gamesEmoji += "<:cs_go:941493420541763654>‚†Ä"
			} else if roleID == "836862989872922675" {
				isDelimiterRoleAssigned = true
			}
		}
		if !isDelimiterRoleAssigned {
			err := s.GuildMemberRoleAdd(b.Cfg.GuildID, userId, "836862989872922675")
			if err != nil {
				s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to assign the role to the user")
				return
			}
		}
		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:       "–ò–≥—Ä–æ–≤—ã–µ –†–æ–ª–∏",
			Description: fmt.Sprintf("*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏. –ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ä–æ–ª–∏, –∫–ª–∏–∫–Ω–∏—Ç–µ‚†Äüö´*\n\n<@&836888796443574313>***,*** <@&836884309985067070>***,*** <@&836883811782361109>*** ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –æ–¥–Ω–æ–π –∏–∑ —ç—Ç–∏—Ö —Ä–æ–ª–µ–π –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ ***<#834432875129733138>\n\n> ***–¢–µ–∫—É—â–∏–µ –∏–≥—Ä–æ–≤—ã–µ —Ä–æ–ª–∏:***‚†Ä%v", gamesEmoji),
		}, []*discordgo.Button{{
			Label:    "",
			Style:    discordgo.PrimaryButton,
			Disabled: isBtnDota2Disabled,
			Emoji:    discordgo.ComponentEmoji{ID: "941493420705329152"},
			CustomID: "Dota 2",
		}, {
			Label:    "",
			Style:    discordgo.PrimaryButton,
			Disabled: true,
			Emoji:    discordgo.ComponentEmoji{ID: "941493420663382087"},
			CustomID: "LoL",
		}, {
			Label:    "",
			Style:    discordgo.PrimaryButton,
			Disabled: isBtnCsgoDisabled,
			Emoji:    discordgo.ComponentEmoji{ID: "941493420541763654"},
			CustomID: "CS:GO",
		}, {
			Label:    "",
			Style:    discordgo.DangerButton,
			Disabled: false,
			Emoji:    discordgo.ComponentEmoji{Name: "üö´"},
			CustomID: "–£–¥–∞–ª–∏—Ç—å –†–æ–ª–∏",
		}}, DefaultPanel)
	case "CS:GO":
		err := s.GuildMemberRoleAdd(b.Cfg.GuildID, userId, "836888796443574313")
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to assign the role to the user")
			return
		}
		gamesEmoji := ""
		isBtnDota2Disabled := false
		isBtnLolDisabled := false
		isDelimiterRoleAssigned := false
		u, err := s.GuildMember(b.Cfg.GuildID, userId)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user")
			return
		}
		gamesEmoji += "<:cs_go:941493420541763654>‚†Ä"
		for _, roleID := range u.Roles {
			if roleID == "836883811782361109" {
				isBtnDota2Disabled = true
				gamesEmoji += "<:dota_2:941493420705329152>‚†Ä"
			} else if roleID == "836884309985067070" {
				isBtnLolDisabled = true
				gamesEmoji += "<:lol:941493420663382087>‚†Ä"
			} else if roleID == "836862989872922675" {
				isDelimiterRoleAssigned = true
			}
		}
		if !isDelimiterRoleAssigned {
			err := s.GuildMemberRoleAdd(b.Cfg.GuildID, userId, "836862989872922675")
			if err != nil {
				s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to assign the role to the user")
				return
			}
		}
		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:       "–ò–≥—Ä–æ–≤—ã–µ –†–æ–ª–∏",
			Description: fmt.Sprintf("*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏. –ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ä–æ–ª–∏, –∫–ª–∏–∫–Ω–∏—Ç–µ‚†Äüö´*\n\n<@&836888796443574313>***,*** <@&836884309985067070>***,*** <@&836883811782361109>*** ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –æ–¥–Ω–æ–π –∏–∑ —ç—Ç–∏—Ö —Ä–æ–ª–µ–π –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ ***<#834432875129733138>\n\n> ***–¢–µ–∫—É—â–∏–µ –∏–≥—Ä–æ–≤—ã–µ —Ä–æ–ª–∏:***‚†Ä%v", gamesEmoji),
		}, []*discordgo.Button{{
			Label:    "",
			Style:    discordgo.PrimaryButton,
			Disabled: isBtnDota2Disabled,
			Emoji:    discordgo.ComponentEmoji{ID: "941493420705329152"},
			CustomID: "Dota 2",
		}, {
			Label:    "",
			Style:    discordgo.PrimaryButton,
			Disabled: isBtnLolDisabled,
			Emoji:    discordgo.ComponentEmoji{ID: "941493420663382087"},
			CustomID: "LoL",
		}, {
			Label:    "",
			Style:    discordgo.PrimaryButton,
			Disabled: true,
			Emoji:    discordgo.ComponentEmoji{ID: "941493420541763654"},
			CustomID: "CS:GO",
		}, {
			Label:    "",
			Style:    discordgo.DangerButton,
			Disabled: false,
			Emoji:    discordgo.ComponentEmoji{Name: "üö´"},
			CustomID: "–£–¥–∞–ª–∏—Ç—å –†–æ–ª–∏",
		}}, DefaultPanel)
	case "–£–¥–∞–ª–∏—Ç—å –†–æ–ª–∏":
		gamesEmoji := "`–ù–µ—Ç`"

		u, err := s.GuildMember(b.Cfg.GuildID, userId)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user")
			return
		}
		for _, roleID := range u.Roles {
			if roleID == "836883811782361109" {
				err := s.GuildMemberRoleRemove(b.Cfg.GuildID, userId, "836883811782361109")
				if err != nil {
					s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to remove the role to the user")
					return
				}
			} else if roleID == "836884309985067070" {
				err := s.GuildMemberRoleRemove(b.Cfg.GuildID, userId, "836884309985067070")
				if err != nil {
					s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to remove the role to the user")
					return
				}
			} else if roleID == "836888796443574313" {
				err := s.GuildMemberRoleRemove(b.Cfg.GuildID, userId, "836888796443574313")
				if err != nil {
					s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to remove the role to the user")
					return
				}
			}
		}
		err = s.GuildMemberRoleRemove(b.Cfg.GuildID, userId, "836862989872922675")
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to remove the role to the user")
			return
		}
		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:       "–ò–≥—Ä–æ–≤—ã–µ –†–æ–ª–∏",
			Description: fmt.Sprintf("*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–∏. –ß—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Ä–æ–ª–∏, –∫–ª–∏–∫–Ω–∏—Ç–µ‚†Äüö´*\n\n<@&836888796443574313>***,*** <@&836884309985067070>***,*** <@&836883811782361109>*** ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –æ–¥–Ω–æ–π –∏–∑ —ç—Ç–∏—Ö —Ä–æ–ª–µ–π –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ ***<#834432875129733138>\n\n> ***–¢–µ–∫—É—â–∏–µ –∏–≥—Ä–æ–≤—ã–µ —Ä–æ–ª–∏:***‚†Ä%v", gamesEmoji),
		}, []*discordgo.Button{{
			Label:    "",
			Style:    discordgo.PrimaryButton,
			Disabled: false,
			Emoji:    discordgo.ComponentEmoji{ID: "941493420705329152"},
			CustomID: "Dota 2",
		}, {
			Label:    "",
			Style:    discordgo.PrimaryButton,
			Disabled: false,
			Emoji:    discordgo.ComponentEmoji{ID: "941493420663382087"},
			CustomID: "LoL",
		}, {
			Label:    "",
			Style:    discordgo.PrimaryButton,
			Disabled: false,
			Emoji:    discordgo.ComponentEmoji{ID: "941493420541763654"},
			CustomID: "CS:GO",
		}, {
			Label:    "",
			Style:    discordgo.DangerButton,
			Disabled: true,
			Emoji:    discordgo.ComponentEmoji{Name: "üö´"},
			CustomID: "–£–¥–∞–ª–∏—Ç—å –†–æ–ª–∏",
		}}, DefaultPanel)
	case "–¢–æ–ø –ú–∞—Ä–∫–µ—Ç":

		randImage := randSlice([]string{
			"https://cdn.discordapp.com/attachments/838477787877998624/845729225204957294/top_spender_1.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/845729224312487966/top_spender_2.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/845729224135278612/top_spender_3.jpg",
			"https://cdn.discordapp.com/attachments/838477787877998624/940202319507759124/top_spender3.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/845729230645886986/top_spender_4.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/845729222386647051/top_spender_5.jpg",
			"https://cdn.discordapp.com/attachments/838477787877998624/941079746773672026/top_spender6.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/941079747453124618/top_spender7.gif",
		})
		fields := []*discordgo.MessageEmbedField{}
		sp, err := b.MarketData.TopTenSpenders()
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get top 10 spenders")
			return
		}
		for n, s := range sp {
			fields = append(fields, &discordgo.MessageEmbedField{
				Name:  fmt.Sprintf("%v –º–µ—Å—Ç–æ:", n+1),
				Value: fmt.Sprintf("<@!%v> ‚Äî **%v** %v", s.UserID, s.Spent, b.Cfg.Currency),
			})
		}
		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:  "–¢–æ–ø-10 (–ú–∞—Ä–∫–µ—Ç)",
			Fields: fields,
			Image:  &discordgo.MessageEmbedImage{URL: randImage},
		}, nil, DefaultPanel)
	case "–¢–æ–ø –í–æ–π—Å":
		randImage := randSlice([]string{
			"https://cdn.discordapp.com/attachments/838477787877998624/845729222386647051/top_spender_5.jpg",
			"https://cdn.discordapp.com/attachments/838477787877998624/845729224312487966/top_spender_2.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/845729225204957294/top_spender_1.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/845729230645886986/top_spender_4.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/940202319507759124/top_spender3.gif",
		})
		fields := []*discordgo.MessageEmbedField{}
		vs, err := b.MarketData.TopTenVoice()
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get top 10 voice")
			return
		}

		for n, v := range vs {
			fields = append(fields, &discordgo.MessageEmbedField{
				Name:  fmt.Sprintf("%v –º–µ—Å—Ç–æ:", n+1),
				Value: fmt.Sprintf("<@!%v> ‚Äî **%v** —á. ", v.UserID, v.Spent/hoursAsSec),
			})
		}
		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:  "–¢–æ–ø-10 (–í–æ–π—Å)",
			Fields: fields,
			Image:  &discordgo.MessageEmbedImage{URL: randImage},
		}, nil, DefaultPanel)
	case "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –†–æ–ª—è–º–∏":
		var rolesID []string
		var rolesDials []int
		var rolesIsHidden []bool
		rolesList := ""
		ps, err := b.MarketData.UserOrders(userId)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get products")
		}
		for _, p := range ps {
			if p.Product.Type == "role" {
				rolesID = append(rolesID, p.Product.RoleID)
				rolesDials = append(rolesDials, p.Product.Dial)
				rolesIsHidden = append(rolesIsHidden, p.IsHidden)
				showOrHide := "–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è"
				if p.IsHidden {
					showOrHide = "–°–∫—Ä—ã—Ç–∞"
				}
				rolesList += fmt.Sprintf("\n\n<@&%v> ‚Äî `%v`", p.Product.RoleID, showOrHide)
				if err != nil {
					s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to determine whether user has a product")
					return
				}

			}
		}
		btnsRoleHide := []*discordgo.Button{}
		for i := 1; i < len(rolesID)+1; i++ {
			label := ""
			emoji := ""
			customID := ""
			if rolesIsHidden[i-1] {
				label = "‚†Ä –ü–æ–∫–∞–∑–∞—Ç—å ‚†Ä"
				customID = "–ü–æ–∫–∞–∑–∞—Ç—å"
			} else {
				label = "‚†Ä‚†Ä–°–∫—Ä—ã—Ç—å‚†Ä‚†Ä"
				customID = "–°–∫—Ä—ã—Ç—å"
			}
			switch rolesDials[i-1] {
			case 1:
				emoji = "‚ôüÔ∏è"
			case 2:
				emoji = "üå∏"
			case 3:
				emoji = "‚ùÑÔ∏è"
			case 4:
				emoji = "üî´"
			case 5:
				emoji = "üçæ"
			case 6:
				emoji = "üêæ"
			case 7:
				emoji = "üó°Ô∏è"
			case 8:
				emoji = "ü§™"
			case 9:
				emoji = "‚≠ê"
			case 10:
				emoji = "üß¨"
			case 11:
				emoji = "üèµÔ∏è"
			case 12:
				emoji = "üßª"
			case 13:
				emoji = "üåà"
			case 14:
				emoji = "üí•"
			case 15:
				emoji = "üíä"
			}

			btnsRoleHide = append(btnsRoleHide, &discordgo.Button{
				Label:    label,
				Style:    discordgo.SuccessButton,
				Disabled: false,
				CustomID: fmt.Sprintf(customID+" –†–æ–ª—å %v", rolesDials[i-1]),
				Emoji:    discordgo.ComponentEmoji{Name: emoji},
			})
		}
		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:       "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –†–æ–ª—è–º–∏",
			Description: fmt.Sprintf("```–ü—Ä–∏–æ–±—Ä–∏—Ç–µ–Ω–Ω–∞—è —Ä–æ–ª—å –º–æ–∂–µ—Ç —Å—Ç–æ—è—Ç—å –≤—ã—à–µ –¥—Ä—É–≥–∏—Ö —Ä–æ–ª–µ–π, —Ç–µ–º —Å–∞–º—ã–º, –ª–∏—à–∞—è –≤–∞—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç –Ω–∏–∫–Ω–µ–π–º–∞.```\n```–ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ä–æ–ª–∏ –≤—Å–µ–≥–¥–∞ –≤—ã—à–µ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Ä–æ–ª–µ–π, –ø–æ—ç—Ç–æ–º—É –∏—Ö –Ω–µ–ª—å–∑—è –ø–æ–∫–∞–∑–∞—Ç—å / —Å–∫—Ä—ã—Ç—å.```\n*–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–∫–∞–∑–∞ / —Å–æ–∫—Ä—ã—Ç–∏—è.*\n\n> **–ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã–µ —Ä–æ–ª–∏:**%v", rolesList),
		}, btnsRoleHide, DefaultPanel)
	case "–ö—É–ø–∏—Ç—å –ü–∞–∫":

		_, balance, err := b.isEnoughCurrency(userId, b.Cfg.LootboxPrice)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user balance")
			return
		}
		isbtnLtbxAmountDisabled1 := true
		isbtnLtbxAmountDisabled3 := true
		isbtnLtbxAmountDisabled5 := true
		isbtnLtbxAmountDisabled10 := true
		if balance >= b.Cfg.LootboxPrice*1 {
			isbtnLtbxAmountDisabled1 = false
		}
		if balance >= b.Cfg.LootboxPrice*3 {
			isbtnLtbxAmountDisabled3 = false
		}
		if balance >= b.Cfg.LootboxPrice*5 {
			isbtnLtbxAmountDisabled5 = false
		}
		if balance >= b.Cfg.LootboxPrice*10 {
			isbtnLtbxAmountDisabled10 = false
		}
		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:       "–ü–∞–∫–∏",
			Description: "*–í—ã–±–µ—Ä–∏—Ç–µ, —Å–∫–æ–ª—å–∫–æ –ø–∞–∫–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏.*",
			Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/868859306051768340/icon_lootbox_buy.png"},
		},
			[]*discordgo.Button{{
				Style:    discordgo.SuccessButton,
				Disabled: isbtnLtbxAmountDisabled1,
				CustomID: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–∞–∫–æ–≤ 1",
				Emoji:    discordgo.ComponentEmoji{ID: "859212034515533864"},
			}, {
				Style:    discordgo.SuccessButton,
				Disabled: isbtnLtbxAmountDisabled3,
				CustomID: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–∞–∫–æ–≤ 3",
				Emoji:    discordgo.ComponentEmoji{ID: "859212034662727680"},
			}, {
				Style:    discordgo.SuccessButton,
				Disabled: isbtnLtbxAmountDisabled5,
				CustomID: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–∞–∫–æ–≤ 5",
				Emoji:    discordgo.ComponentEmoji{ID: "859212034095710239"},
			}, {
				Style:    discordgo.SuccessButton,
				Disabled: isbtnLtbxAmountDisabled10,
				CustomID: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–∞–∫–æ–≤ 10",
				Emoji:    discordgo.ComponentEmoji{ID: "859210540398936094"},
			},
			}, DefaultPanel)
	case "–û—Ç–∫—Ä—ã—Ç—å –ü–∞–∫":
		randImage := randSlice([]string{
			"https://cdn.discordapp.com/attachments/838477787877998624/854813596747563028/pack_open.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/854813575084638248/pack_open2.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/854813573334564864/pack_open3.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/854813567097241631/open_pack4.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/854813707820597248/open_pack5.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/854813569510408252/open_pack6.gif",
		})
		err := b.MarketData.LootboxRemove(userId, 1)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to remove a lootbox from the user")
		}

		embed := &discordgo.MessageEmbed{
			Description: "```yaml\n–¢—ã –æ—Ç—Ä—ã–≤–∞–µ—à—å –≤–µ—Ä—Ö—É—à–∫—É –æ—Ç –ø–∞–∫–∞ –∏ –≤–∏–¥–∏—à—å...```",
			Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/868859317934252072/icon_lootbox_open.png"},
			Image: &discordgo.MessageEmbedImage{
				URL: randImage,
			},
		}

		rand.Seed(time.Now().UnixNano())
		r := rand.Float64()
		// User gets currency
		if r < 0.7 {
			amount := int(float64(rand.Intn(b.Cfg.LootboxPrice)) * 1.3)
			err = b.MarketData.BalanceUpdate(userId, amount)
			if err != nil {
				s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to update user's balance")
			}
			embed.Description += fmt.Sprintf("\n*–ú–º–º... –°–≤–µ–∂–∏–µ —Ç—Ä—É—Å–∏–∫–∏, –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ:*\n\n`%v` %v", amount, b.Cfg.Currency)
			b.openPackPanel(s, i, embed)
			return
		}

		ps, err := b.MarketData.Products()
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get products")
		}

		r = rand.Float64()
		dur := 0
		if r < 0.33 {
			dur = 1
		} else if r < 0.66 {
			dur = 3
		} else {
			dur = 7
		}
		duration := int64(dur) * dayAsSec
		textDuration := fmt.Sprintf("*–Ω–∞* `%d` *–¥.*", dur)

		if r < 0.65 {
			// User gets a reaction
			var reactions []product
			for _, p := range ps {
				if p.Type == "reaction" {
					reactions = append(reactions, p)
				}
			}
			p := &reactions[rand.Intn(len(reactions))]
			p.Price = 0
			embed.Description += fmt.Sprintf("\n*–ü–æ–≤–µ–∑–ª–æ, –ø–æ–≤–µ–∑–ª–æ!*\n\n*–ù–∞–±–æ—Ä –∞–Ω–∏–º–µ-—Ä–µ–∞–∫—Ü–∏–π ‚Äî*\n\n**%v** %v\n\n*–°–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞ –∫–æ–º-–Ω–∏–±—É–¥—å –æ–ø—Ä–æ–±–æ–≤–∞—Ç—å!* ü§™", p.Name, b.Cfg.EmojiReaction)
			err = b.MarketData.Order(userId, p, -1)
			if err != nil {
				s.ChannelMessageSend(b.Cfg.AlertChannel, "Error while processing order")
				return
			}

		} else if r < 0.95 {
			// User gets a role
			var roles []product
			for _, p := range ps {
				if p.Type == "role" {
					roles = append(roles, p)
				}
			}

			p := &roles[rand.Intn(len(roles))]
			p.Price = 0
			embed.Description += fmt.Sprintf("\n*–ö–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–µ–Ω—å–∫–∞—è, –º–∏–ª–µ–Ω—å–∫–∞—è —Ä–æ–ª—å* %v\n\n %v <@&%s> \n\n*–ß—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—É—á—à–µ?*", textDuration, b.Cfg.EmojiRole, p.RoleID)

			err = b.MarketData.Order(userId, p, duration)
			if err != nil {
				s.ChannelMessageSend(b.Cfg.AlertChannel, "Error while processing order")
				return
			}

			err = b.roleGive(s, i.GuildID, userId, p.RoleID)
			if err != nil {
				s.ChannelMessageSend(b.Cfg.AlertChannel, "Error giving role")
				return
			}

		} else {
			ch := make(chan map[string]string)
			defer close(ch)
			textChannelID, voiceChannelID, _, _, err := b.MarketData.HasCustomerChannels(userId)
			if err != nil {
				s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user's channels")
				return
			}
			go b.addChannels(s, i, textChannelID, voiceChannelID, ch)
			c := <-ch
			if textChannelID == "" {
				embed.Description += fmt.Sprintf("\n***–ß–¢–û!? –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –æ–Ω–∏-—á–∞–Ω!***\n\n*–¢–µ–±–µ –≤—ã–ø–∞–ª–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ* %v\n\n> **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:**\n\n`%v`\n\n> **–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª:**\n\n%v\n\n> **–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª:**\n\n%v\n\n*–í —Ç–µ—á–µ–Ω–∏–µ `6` –º–µ—Å—è—Ü–µ–≤ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–±–µ!*", b.Cfg.EmojiPrivateChannel, c["categoryChannel"], c["textChannel"], c["voiceChannel"])
			} else {
				embed.Description += fmt.Sprintf("\n***–ß–¢–û!? –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –æ–Ω–∏-—á–∞–Ω!***\n\n*–¢–µ–±–µ –≤—ã–ø–∞–ª–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ* %v\n\n*–û–¥–Ω–∞–∫–æ, –æ–Ω–æ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å.*\n\n*–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ä–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞* `6` *–º–µ—Å—è—Ü–µ–≤!*\n\n> **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:**\n\n`%v`\n\n> **–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª:**\n\n%v\n\n> **–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª:**\n\n%v", b.Cfg.EmojiPrivateChannel, c["categoryChannel"], c["textChannel"], c["voiceChannel"])
			}
		}
		b.openPackPanel(s, i, embed)
	case "–ú–∞—Ä–∫–µ—Ç":
		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:       "–ú–∞—Ä–∫–µ—Ç",
			Description: "```–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ç–æ–≤–∞—Ä.```",
			Image:       &discordgo.MessageEmbedImage{URL: "https://cdn.discordapp.com/attachments/838477787877998624/846497994702192680/AhegaoStore.gif"},
			Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/857292340876017694/cart_buy.png"},
		},
			[]*discordgo.Button{{
				Label:    "‚†Ä–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞‚†Ä",
				Style:    discordgo.PrimaryButton,
				Disabled: false,
				CustomID: "–ú–∞—Ä–∫–µ—Ç –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞",
				Emoji:    discordgo.ComponentEmoji{ID: "941315452523675699"},
			}, {
				Label:    "‚†Ä‚†Ä–†–æ–ª–∏‚†Ä‚†Ä",
				Style:    discordgo.PrimaryButton,
				Disabled: false,
				CustomID: "–ú–∞—Ä–∫–µ—Ç –†–æ–ª–∏",
				Emoji:    discordgo.ComponentEmoji{ID: "941315452536234084"},
			}, {
				Label:    "‚†Ä–†–µ–∞–∫—Ü–∏–∏‚†Ä‚†Ä",
				Style:    discordgo.PrimaryButton,
				Disabled: false,
				CustomID: "–ú–∞—Ä–∫–µ—Ç –†–µ–∞–∫—Ü–∏–∏",
				Emoji:    discordgo.ComponentEmoji{ID: "941315452196495380"},
			}, {
				Label:    "‚†Ä‚†Ä‚†Ä‚†Ä–ü–∞–∫–∏‚†Ä‚†Ä‚†Ä ‚†Ä",
				Style:    discordgo.PrimaryButton,
				Disabled: false,
				CustomID: "–ú–∞—Ä–∫–µ—Ç –ü–∞–∫–∏",
				Emoji:    discordgo.ComponentEmoji{ID: "941315452574007296"},
			}, {
				Label:    "‚†Ä –õ–æ—Ç–µ—Ä–µ—è",
				Style:    discordgo.PrimaryButton,
				Disabled: false,
				CustomID: "–ú–∞—Ä–∫–µ—Ç –õ–æ—Ç–µ—Ä–µ—è",
				Emoji:    discordgo.ComponentEmoji{ID: "941315452427178025"},
			}}, MarketPanel)
	case "–ú–∞—Ä–∫–µ—Ç –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞":
		description := "```–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞–ª–∏—á–∏–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–∏—à—å –æ–¥–Ω–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ.```\n```–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.```\n```–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, —á—Ç–æ –¥–µ—à–µ–≤–ª–µ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è.```"
		buySpaceButtonDisabled := true
		isEnoughCurrency, balance, err := b.isEnoughCurrency(userId, 15000)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user balance")
			return
		}
		if isEnoughCurrency {
			buySpaceButtonDisabled = false
		}
		textChannelID, voiceChannelID, _, channelsExpires, err := b.MarketData.HasCustomerChannels(userId)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user's channels")
			return
		}
		if textChannelID == "" {
			description += "\n> **–ò–º–µ–µ—Ç—Å—è –ª–∏ –≤ –Ω–∞–ª–∏—á–∏–∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ:**\n\n`–ù–µ—Ç`"
			openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
				Title:       "–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞",
				Description: description,
				Image:       &discordgo.MessageEmbedImage{URL: "https://cdn.discordapp.com/attachments/838477787877998624/846465333593768017/AhegaoSpaces.gif"},
				Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/849718325709635614/icon_space.png"},
			},
				[]*discordgo.Button{{
					Label:    "‚†Ä–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏‚†Ä|‚†Ä15000 —Ç.‚†Ä|‚†Ä6 –º–µ—Å.‚†Ä‚†Ä",
					Style:    discordgo.SuccessButton,
					Disabled: buySpaceButtonDisabled,
					CustomID: "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ",
					Emoji:    discordgo.ComponentEmoji{ID: "941476541144137819"},
				}}, DefaultPanel)
		} else {
			extendSpaceButtonDisabled := true
			if balance > 12000 {
				extendSpaceButtonDisabled = false
			}
			textChannel, err := s.Channel(textChannelID)
			if err != nil {
				s.ChannelMessageSend(b.Cfg.AlertChannel, "Error getting text channel in guild")
				return
			}
			voiceChannel, err := s.Channel(voiceChannelID)
			if err != nil {
				s.ChannelMessageSend(b.Cfg.AlertChannel, "Error getting voice channel in guild")
				return
			}
			category, err := s.Channel(voiceChannel.ParentID)
			if err != nil {
				s.ChannelMessageSend(b.Cfg.AlertChannel, "Error getting category channel in guild")
				return
			}
			format := "02/01/06"
			description += fmt.Sprintf("\n*–ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–µ–µ –≤–∞–º.*\n\n> **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:**\n\n`%v`\n\n> **–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª:**\n\n%v\n\n> **–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª:**\n\n%v\n\n> **–°—Ä–æ–∫ –∏—Å—Ç–µ—á–µ–Ω–∏—è:**\n\n`%v`", category.Name, textChannel.Mention(), voiceChannel.Mention(), time.Unix(channelsExpires, 0).Format(format))
			openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
				Title:       "–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞",
				Description: description,
				Image:       &discordgo.MessageEmbedImage{URL: "https://cdn.discordapp.com/attachments/838477787877998624/846465333593768017/AhegaoSpaces.gif"},
				Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/849718325709635614/icon_space.png"},
			},
				[]*discordgo.Button{{
					Label:    "‚†Ä‚†Ä–ü—Ä–æ–¥–ª–∏—Ç—å‚†Ä|‚†Ä12000 —Ç.‚†Ä|‚†Ä6 –º–µ—Å.‚†Ä ‚†Ä",
					Style:    discordgo.SuccessButton,
					Disabled: extendSpaceButtonDisabled,
					CustomID: "–ü—Ä–æ–¥–ª–∏—Ç—å –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ",
					Emoji:    discordgo.ComponentEmoji{ID: "849720295861780480"},
				}}, DefaultPanel)
		}
	case "–ú–∞—Ä–∫–µ—Ç –†–æ–ª–∏":

		items, err := b.MarketData.UserOrders(userId)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user's items")
			return
		}
		description := "```–í —Ä–∞–∑–¥–µ–ª–µ \"–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏\" –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ª–∏—à—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–æ–ª–∏.```\n```–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é —Ä–æ–ª—å, —Å–æ —Å–≤–æ–∏–º —Ü–≤–µ—Ç–æ–º –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–ø–æ–ø–∫—É \"–°–æ–∑–¥–∞—Ç—å\".```"
		format := "02/01/06"
		d := ""
		for _, i := range items {
			if i.Product.Type == "role" || i.Product.Type == "customrole" {
				d += fmt.Sprintf("\n<@&%s>  ‚Äî  `%s`\n", i.Product.RoleID, time.Unix(i.Expires, 0).Format(format))
			}
		}
		if d != "" {
			description += fmt.Sprintf("\n> **–†–æ–ª—å ‚Äî –°—Ä–æ–∫ –∏—Å—Ç–µ—á–µ–Ω–∏—è:**\n%v", d)
		}
		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:       "–†–æ–ª–∏",
			Description: description,
			Image:       &discordgo.MessageEmbedImage{URL: "https://cdn.discordapp.com/attachments/838477787877998624/846512025433538610/AhegaoRoles.gif"},
			Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/849718327135567872/icon_role.png"},
		},
			[]*discordgo.Button{{
				Label:    "‚†Ä–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏‚†Ä",
				Style:    discordgo.SuccessButton,
				Disabled: false,
				CustomID: "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –†–æ–ª—å",
				Emoji:    discordgo.ComponentEmoji{ID: "858763110285574154"},
			}, {
				Label:    "‚†Ä–°–æ–∑–¥–∞—Ç—å‚†Ä‚†Ä",
				Style:    discordgo.SuccessButton,
				Disabled: false,
				CustomID: "–°–æ–∑–¥–∞—Ç—å –†–æ–ª—å R|+0",
				Emoji:    discordgo.ComponentEmoji{ID: "858694330075185182"},
			}}, DefaultPanel)
	case "–ú–∞—Ä–∫–µ—Ç –†–µ–∞–∫—Ü–∏–∏":

		items, err := b.MarketData.UserOrders(userId)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user's items")
			return
		}
		description := "```–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–º–µ–Ω—è—Ç—å —Ä–µ–∞–∫—Ü–∏–∏, –Ω–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—è –∏—Ö –Ω–∞–≤—Å–µ–≥–¥–∞, –æ–¥–Ω–∞–∫–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—Ö–æ–¥–∏—Ç—Å—è –¥–æ—Ä–æ–≥–æ.```\n```–ù–∞–±–æ—Ä—ã —Ä–µ–∞–∫—Ü–∏–π —è–≤–ª—è—é—Ç—Å—è –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º–∏ –∏ –¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:```\n`/–æ–±–Ω—è—Ç—å` –∏ `/–æ–±–Ω—è—Ç—å @–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å`"
		d := ""
		for _, i := range items {
			if i.Product.Type == "reaction" {
				expires := time.Unix(i.Expires, 0).Format("02/01/06")
				if i.Expires == -1 {
					expires = "–ù–∞–≤—Å–µ–≥–¥–∞"
				}
				d += fmt.Sprintf("\n**%s**  ‚Äî  `%s`\n", i.Product.Name, expires)
			}
		}
		if d != "" {
			description += fmt.Sprintf("\n\n> **–†–µ–∞–∫—Ü–∏—è ‚Äî –°—Ä–æ–∫ –∏—Å—Ç–µ—á–µ–Ω–∏—è:**\n%v", d)
		}
		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:       "–†–µ–∞–∫—Ü–∏–∏",
			Description: description,
			Image:       &discordgo.MessageEmbedImage{URL: "https://cdn.discordapp.com/attachments/838477787877998624/848963272619327498/AhegaoReactions.gif"},
			Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/849718328456511488/icon_reaction.png"},
		},
			[]*discordgo.Button{{
				Label:    "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä ‚†Ä",
				Style:    discordgo.SuccessButton,
				Disabled: false,
				CustomID: "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –†–µ–∞–∫—Ü–∏—é",
				Emoji:    discordgo.ComponentEmoji{ID: "859160144571400193"},
			}}, DefaultPanel)
	case "–ú–∞—Ä–∫–µ—Ç –ü–∞–∫–∏":
		b.openPackPanel(s, i, &discordgo.MessageEmbed{
			Thumbnail: &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/849718331191197746/icon_lootbox.png"},
			Image:     &discordgo.MessageEmbedImage{URL: "https://cdn.discordapp.com/attachments/838477787877998624/861645969778540544/AhegaoPacks.gif"}})
	case "–ú–∞—Ä–∫–µ—Ç –õ–æ—Ç–µ—Ä–µ—è":
		isTicketHas := "–ù–µ—Ç"
		isTicketHasIsBtnDisabled := false
		for _, v := range b.LotterySession.Participants {
			if v == userId {
				isTicketHas = "–î–∞"
				isTicketHasIsBtnDisabled = true
				break
			}
		}
		if len(b.LotterySession.Participants) == 10 {
			isTicketHasIsBtnDisabled = true
		}
		lotteryTimeMinutesRemaining := time.Until(b.LotterySession.Expires).Minutes()
		hours := int(lotteryTimeMinutesRemaining) / 60
		mins := int(lotteryTimeMinutesRemaining) - hours*60
		description := fmt.Sprintf("```–ö–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –ª–æ—Ç–µ—Ä–µ—è, –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏—é –∫–æ—Ç–æ—Ä–æ–π –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Ä–∞–∑—ã–≥—Ä–∞–≤–∞—é—Ç—Å—è —Ç—Ä—É—Å–∏–∫–∏ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ: %v * —á–∏—Å–ª–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.``````–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –æ–¥–Ω–æ–π –ª–æ—Ç–µ—Ä–µ–µ ‚Äî 10.```\n> **–ü—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω –ª–∏ –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç?**\n\n `%v`\n\n> **–ë–∏–ª–µ—Ç–æ–≤ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ:**\n\n `%v –∏–∑ 10`\n\n> **–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ª–æ—Ç–µ—Ä–µ–∏:**\n\n `%v:%v`", b.Cfg.LotteryPrice, isTicketHas, len(b.LotterySession.Participants), hours, mins)
		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:       "–õ–æ—Ç–µ—Ä–µ—è",
			Description: description,
			Image:       &discordgo.MessageEmbedImage{URL: "https://cdn.discordapp.com/attachments/838477787877998624/861645967702491136/AhegaoLottery.gif"},
			Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/849718749275619428/icon_ticket.png"},
		}, []*discordgo.Button{{
			Label:    "‚†Ä‚†Ä‚†Ä‚†Ä–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ë–∏–ª–µ—Ç‚†Ä|‚†Ä100 —Ç.‚†Ä‚†Ä‚†Ä",
			Style:    discordgo.SuccessButton,
			Disabled: isTicketHasIsBtnDisabled,
			CustomID: "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ë–∏–ª–µ—Ç",
			Emoji:    discordgo.ComponentEmoji{ID: "861217535286181908"},
		}}, DefaultPanel)
	case "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ":
		randImage := randSlice([]string{
			"https://cdn.discordapp.com/attachments/838477787877998624/858440892582068264/space.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/858440871891566612/space1.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/858440873083928616/space2.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/858440877294878750/space3.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/858440881156390922/space4.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/858440886320365608/space5.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/858440885364326410/space6.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/858440888601411620/space7.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/858440890616119336/space8.gif",
		})
		err := b.MarketData.BalanceUpdate(userId, -15000)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to update user's balance")
			return
		}
		textChannelID, voiceChannelID, _, _, err := b.MarketData.HasCustomerChannels(userId)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user's channels")
			return
		}
		ch := make(chan map[string]string)
		defer close(ch)
		go b.addChannels(s, i, textChannelID, voiceChannelID, ch)
		c := <-ch
		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:       "–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞",
			Description: fmt.Sprintf("*–û–Ω–∏-—á–∞–Ω –º–æ–∂–µ—Ç –º–Ω–æ–≥–æ–µ —Å–µ–±–µ –ø–æ–∑–≤–æ–ª–∏—Ç—å!*\n\n*–í–µ–¥—å –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –Ω–µ –∏–∑ –¥–µ—à–µ–≤—ã—Ö.*\n\n*–†–∞—Å—Å–µ–∫–∞–µ–º —Å–∫–≤–æ–∑—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏ –≤—Ä–µ–º—è!*\n\n> **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:**\n\n`%v`\n\n> **–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª:**\n\n%v\n\n> **–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª:**\n\n%v\n\n*–í —Ç–µ—á–µ–Ω–∏–µ `6` –º–µ—Å—è—Ü–µ–≤ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–±–µ!*", c["categoryChannel"], c["textChannel"], c["voiceChannel"]),
			Image:       &discordgo.MessageEmbedImage{URL: randImage},
			Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/909130471122825276/icon_space_buy.png"},
		}, nil, DefaultPanel)
	case "–ü—Ä–æ–¥–ª–∏—Ç—å –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ":
		randImage := randSlice([]string{
			"https://cdn.discordapp.com/attachments/838477787877998624/858440892582068264/space.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/858440871891566612/space1.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/858440873083928616/space2.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/858440877294878750/space3.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/858440881156390922/space4.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/858440886320365608/space5.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/858440885364326410/space6.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/858440888601411620/space7.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/858440890616119336/space8.gif",
		})
		err := b.MarketData.BalanceUpdate(userId, -12000)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to update user's balance")
			return
		}
		textChannelID, voiceChannelID, _, _, err := b.MarketData.HasCustomerChannels(userId)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user's channels")
			return
		}
		ch := make(chan map[string]string)
		defer close(ch)
		go b.addChannels(s, i, textChannelID, voiceChannelID, ch)
		c := <-ch
		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:       "–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞",
			Description: fmt.Sprintf("*–°–æ–∑–µ—Ä—Ü–∞—è –º–∏—Ä—ã, —Ä–∞—Å—à–∏—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –≤–º–µ—Å—Ç–µ —Å –±—Ä–∞—Ç–∏–∫–æ–º.*\n\n> **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:**\n\n`%v`\n\n> **–¢–µ–∫—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª:**\n\n%v\n\n> **–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª:**\n\n%v\n\n*–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –Ω–∞ `6` –º–µ—Å—è—Ü–µ–≤* %v", c["categoryChannel"], c["textChannel"], c["voiceChannel"], b.Cfg.EmojiPrivateChannel),
			Image:       &discordgo.MessageEmbedImage{URL: randImage},
			Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/909130471122825276/icon_space_buy.png"},
		}, nil, DefaultPanel)
	case "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –†–æ–ª—å":
		var rolesID []string
		var isHasProducts map[string]bool = make(map[string]bool)
		rolesList := ""
		allRoles, err := b.MarketData.Products()
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get products")
		}
		for _, p := range allRoles {
			if p.Type == "role" {
				rolesID = append(rolesID, p.RoleID)
				rolesList += fmt.Sprintf("\n\n<@&%v>", p.RoleID)
			}
		}
		ps, err := b.MarketData.UserOrders(userId)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user's orders")
		}
		for _, p := range ps {
			if p.Product.Type == "role" {
				isHasProducts[p.Product.RoleID] = true
				if err != nil {
					s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to determine whether user has a product")
					return
				}
			}
		}
		buyRoleButtonDisabled := true
		isEnoughCurrency, _, err := b.isEnoughCurrency(userId, 2700)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user balance")
			return
		}
		if isEnoughCurrency {
			buyRoleButtonDisabled = false
		}
		btnsRoleBuy := []*discordgo.Button{}
		for i := 1; i < len(rolesID)+1; i++ {
			label := ""
			emoji := ""
			customID := ""
			if isHasProducts[rolesID[i-1]] {
				label = "‚†Ä–ü—Ä–æ–¥–ª–∏—Ç—å‚†Ä"
				customID = "–ü—Ä–æ–¥–ª–∏—Ç—å"
			} else {
				label = "‚†Ä‚†Ä–ö—É–ø–∏—Ç—å‚†Ä‚†Ä"
				customID = "–ö—É–ø–∏—Ç—å"
			}
			switch i {
			case 1:
				emoji = "‚ôüÔ∏è"
			case 2:
				emoji = "üå∏"
			case 3:
				emoji = "‚ùÑÔ∏è"
			case 4:
				emoji = "üî´"
			case 5:
				emoji = "üçæ"
			case 6:
				emoji = "üêæ"
			case 7:
				emoji = "üó°Ô∏è"
			case 8:
				emoji = "ü§™"
			case 9:
				emoji = "‚≠ê"
			case 10:
				emoji = "üß¨"
			case 11:
				emoji = "üèµÔ∏è"
			case 12:
				emoji = "üßª"
			case 13:
				emoji = "üåà"
			case 14:
				emoji = "üí•"
			case 15:
				emoji = "üíä"
			}

			btnsRoleBuy = append(btnsRoleBuy, &discordgo.Button{
				Label:    label,
				Style:    discordgo.SuccessButton,
				Disabled: buyRoleButtonDisabled,
				CustomID: fmt.Sprintf(customID+" –†–æ–ª—å %v", strconv.FormatInt(int64(i), 10)),
				Emoji:    discordgo.ComponentEmoji{Name: emoji},
			})
		}
		description := fmt.Sprintf("**–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–æ–ª–µ–π —É—Å–ª–æ–≤–Ω–æ –µ–¥–∏–Ω–∞ ‚Äî\n\n** `2700` %v –Ω–∞ —Å—Ä–æ–∫ `1` –Ω–µ–¥–µ–ª–∏.\n\n\n> **–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ä–æ–ª–µ–π:**%v", b.Cfg.EmojiRole, rolesList)
		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:       "–†–æ–ª–∏",
			Description: description,
			Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/858764424160608306/icon_role_buy.png"},
		}, btnsRoleBuy, DefaultPanel)
	case "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –†–µ–∞–∫—Ü–∏—é":

		var reactionsNames []string
		var isHasProducts map[string]bool = make(map[string]bool)
		reactionsList := ""
		ps, err := b.MarketData.Products()
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get products")
		}
		j := 0
		for _, p := range ps {
			if p.Type == "reaction" {
				j++
				reactionsNames = append(reactionsNames, p.Name)
				reactionsList += fmt.Sprintf("\n\n**%v.** `%v` %v", j, p.Name, b.Cfg.EmojiReaction)
				hasProduct, err := b.MarketData.HasProduct(userId, p.Dial)
				if err != nil {
					s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to determine whether user has a product")
					return
				}
				if hasProduct {
					isHasProducts[p.Name] = true
				}
			}
		}
		buyReactionButtonDisabled := true
		isEnoughCurrency, _, err := b.isEnoughCurrency(userId, 1350)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user balance")
			return
		}
		btnsRoleBuy := []*discordgo.Button{}
		for i := 1; i < len(reactionsNames)+1; i++ {
			buyReactionButtonDisabled = false
			emojiID := ""
			if isHasProducts[reactionsNames[i-1]] || !isEnoughCurrency {
				buyReactionButtonDisabled = true
			}
			switch i {
			case 1:
				emojiID = "859212034515533864"
			case 2:
				emojiID = "859212034528903210"
			case 3:
				emojiID = "859212034662727680"
			case 4:
				emojiID = "859212034338717747"
			case 5:
				emojiID = "859212034095710239"
			case 6:
				emojiID = "859212034712141834"
			case 7:
				emojiID = "859212034578055168"
			case 8:
				emojiID = "859212034604400690"
			case 9:
				emojiID = "859212217274859531"
			case 10:
				emojiID = "859210540398936094"
			case 11:
				emojiID = "859210540023152711"
			case 12:
				emojiID = "859210540395921459"
			case 13:
				emojiID = "859210540689260564"
			case 14:
				emojiID = "859210540517556254"
			case 15:
				emojiID = "859210540487147531"
			case 16:
				emojiID = "859210540458442772"
			case 17:
				emojiID = "859210540441927750"
			case 18:
				emojiID = "859210540475088916"
			case 19:
				emojiID = "859210540499992606"
			case 20:
				emojiID = "859210540491210752"
			case 21:
				emojiID = "859210540136136715"
			case 22:
				emojiID = "859210540491210772"
			case 23:
				emojiID = "859210540520570890"
			case 24:
				emojiID = "859210540231950337"

			}

			btnsRoleBuy = append(btnsRoleBuy, &discordgo.Button{
				Label:    "",
				Style:    discordgo.SuccessButton,
				Disabled: buyReactionButtonDisabled,
				CustomID: fmt.Sprintf("–†–µ–∞–∫—Ü–∏—è %v", strconv.FormatInt(int64(i)+24, 10)),
				Emoji:    discordgo.ComponentEmoji{ID: emojiID},
			})
		}
		description := fmt.Sprintf("**–°—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö —Ä–µ–∞–∫—Ü–∏–π —É—Å–ª–æ–≤–Ω–æ –µ–¥–∏–Ω–∞ ‚Äî\n\n** `1350` %v `–ù–∞–≤—Å–µ–≥–¥–∞`.\n\n\n> **–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ä–µ–∞–∫—Ü–∏–π:**%v", b.Cfg.EmojiReaction, reactionsList)
		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:       "–†–µ–∞–∫—Ü–∏–∏",
			Description: description,
			Image:       &discordgo.MessageEmbedImage{URL: "https://cdn.discordapp.com/attachments/838477787877998624/848963272619327498/AhegaoReactions.gif"},
			Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/859160231376453652/icon_reaction_buy.png"},
		}, btnsRoleBuy, ReactionPanel)
	case "–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ë–∏–ª–µ—Ç":
		randImage := randSlice([]string{
			"https://cdn.discordapp.com/attachments/838477787877998624/861315613221453834/lottery.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/861316510928994334/lottery1.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/861315631113830400/lottery2.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/861315632423632916/lottery3.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/861315643160920104/lottery5.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/861316162352971776/lottery6.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/861321268782825472/lottery7.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/940201422945914920/lottery8.gif",
		})
		b.LotterySession.Participants = append(b.LotterySession.Participants, userId)
		descriptionAdditional := "*–ù–æ –ø–æ–∫–∞, –∫—Ä–æ–º–µ —Ç–µ–±—è, –æ–Ω–∏-—á–∞–Ω, –Ω–∏–∫—Ç–æ –Ω–µ –∫—É–ø–∏–ª –±–∏–ª–µ—Ç.\n\n–ù–∞–¥–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å –¥—Ä—É–≥–∏—Ö!*"
		if len(b.LotterySession.Participants) > 1 {
			descriptionAdditional = fmt.Sprintf("*–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å `1` —à–∞–Ω—Å –∏–∑ `%v`.\n\n–í–æ–∑–º–æ–∂–Ω–æ, —É–¥–∞—á–∞ —É–ª—ã–±–Ω—ë—Ç—Å—è —Ç–µ–±–µ, –æ–Ω–∏-—á–∞–Ω!*", len(b.LotterySession.Participants))
		}
		err := b.MarketData.BalanceUpdate(userId, -b.Cfg.LotteryPrice)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to update user's balance")
		}
		openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
			Title:       "–õ–æ—Ç–µ—Ä–µ—è",
			Description: fmt.Sprintf("*–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Å –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ–º %v, —Ç–µ–ø–µ—Ä—å –≤—ã —É—á–∞—Å—Ç–Ω–∏–∫ –ª–æ—Ç–µ—Ä–µ–∏!*\n\n%v", b.Cfg.EmojiLottery, descriptionAdditional),
			Image:       &discordgo.MessageEmbedImage{URL: randImage},
			Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/861310418735726622/icon_ticket_buy.png"},
		}, nil, DefaultPanel)
	default:
		if strings.Contains(customId, "–°–∫—Ä—ã—Ç—å") || strings.Contains(customId, "–ü–æ–∫–∞–∑–∞—Ç—å") {
			action := customId[:strings.Index(customId, " ")]
			productDial, _ := strconv.Atoi(customId[strings.LastIndex(customId, " ")+1:])
			product, err := b.MarketData.Product(productDial)
			if err != nil {
				s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get info about product")
				return
			}
			isHide := true
			description := fmt.Sprintf("*–ë—Ä–∞—Ç–∏–∫ —Å–ø—Ä—è—Ç–∞–ª –æ—Ç –≤—Å–µ—Ö —Ä–æ–ª—å* <@&%v>*, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ü–≤–µ—Ç –Ω–∏–∫–Ω–µ–π–º–∞!*", product.RoleID)
			if action == "–ü–æ–∫–∞–∑–∞—Ç—å" {
				err = b.roleGive(s, i.GuildID, userId, product.RoleID)
				if err != nil {
					s.ChannelMessageSend(b.Cfg.AlertChannel, "Error giving role")
					return
				}
				isHide = false
				description = fmt.Sprintf("*–ë—Ä–∞—Ç–∏–∫ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–∫—Ä—ã–ª –≤—Å–µ–º —Ä–æ–ª—å* <@&%v>*, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π —Ü–≤–µ—Ç –Ω–∏–∫–Ω–µ–π–º–∞!*", product.RoleID)
			} else {
				err = s.GuildMemberRoleRemove(b.Cfg.GuildID, userId, product.RoleID)
				if err != nil {
					s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to remove role from the user")
					return
				}
				b.roleSweepDelimiters(s, b.Cfg.GuildID, userId)
			}
			err = b.MarketData.IsHiddenUpdate(userId, isHide, productDial)
			if err != nil {
				s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to hide user's role")
				return
			}

			openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
				Title:       "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –†–æ–ª—è–º–∏",
				Description: description,
			}, nil, DefaultPanel)

		} else if strings.Contains(customId, "–°–æ–∑–¥–∞—Ç—å –†–æ–ª—å") {
			colorAndOperation := strings.Split(strings.ReplaceAll(customId, "–°–æ–∑–¥–∞—Ç—å –†–æ–ª—å ", ""), "|")
			red := 0
			green := 0
			blue := 0
			if i.Message.Embeds[0].Fields != nil {
				red, _ = strconv.Atoi(strings.ReplaceAll(i.Message.Embeds[0].Fields[0].Value, "`", ""))
				green, _ = strconv.Atoi(strings.ReplaceAll(i.Message.Embeds[0].Fields[1].Value, "`", ""))
				blue, _ = strconv.Atoi(strings.ReplaceAll(i.Message.Embeds[0].Fields[2].Value, "`", ""))
			}
			if strings.Contains(colorAndOperation[1], "+") {
				value, _ := strconv.Atoi(strings.ReplaceAll(colorAndOperation[1], "+", ""))
				switch colorAndOperation[0] {
				case "R":
					red += value
				case "G":
					green += value
				case "B":
					blue += value
				}
			} else {
				value, _ := strconv.Atoi(strings.ReplaceAll(colorAndOperation[1], "-", ""))
				switch colorAndOperation[0] {
				case "R":
					red -= value
				case "G":
					green -= value
				case "B":
					blue -= value
				}
			}
			operation := ""
			btnsRoleCreate := []*discordgo.Button{}
			for j := 5; j < 20; j++ {
				btnRgbDisabled := false
				var style discordgo.ButtonStyle
				emojiId := ""
				if j < 10 {
					style = discordgo.DangerButton
					operation = "R"
				} else if j < 15 {
					style = discordgo.SuccessButton
					operation = "G"
				} else {
					style = discordgo.PrimaryButton
					operation = "B"
				}
				switch j % 5 {
				case 0:
					emojiId = "862080160962052096"
					if red+50 > 255 && operation == "R" {
						btnRgbDisabled = true
					} else if green+50 > 255 && operation == "G" {
						btnRgbDisabled = true
					} else if blue+50 > 255 && operation == "B" {
						btnRgbDisabled = true
					}
					operation += "|+50"
				case 1:
					emojiId = "862080160970571786"
					if red+10 > 255 && operation == "R" {
						btnRgbDisabled = true
					} else if green+10 > 255 && operation == "G" {
						btnRgbDisabled = true
					} else if blue+10 > 255 && operation == "B" {
						btnRgbDisabled = true
					}
					operation += "|+10"
				case 2:
					emojiId = "862080160991936543"
					if red+1 > 255 && operation == "R" {
						btnRgbDisabled = true
					} else if green+1 > 255 && operation == "G" {
						btnRgbDisabled = true
					} else if blue+1 > 255 && operation == "B" {
						btnRgbDisabled = true
					}
					operation += "|+1"
				case 3:
					emojiId = "862080161079099422"
					if red-10 < 0 && operation == "R" {
						btnRgbDisabled = true
					} else if green-10 < 0 && operation == "G" {
						btnRgbDisabled = true
					} else if blue-10 < 0 && operation == "B" {
						btnRgbDisabled = true
					}
					operation += "|-10"
				case 4:
					emojiId = "862080160776978473"
					if red-50 < 0 && operation == "R" {
						btnRgbDisabled = true
					} else if green-50 < 0 && operation == "G" {
						btnRgbDisabled = true
					} else if blue-50 < 0 && operation == "B" {
						btnRgbDisabled = true
					}
					operation += "|-50"
				}
				btnsRoleCreate = append(btnsRoleCreate, &discordgo.Button{
					Label:    "",
					Style:    style,
					Disabled: btnRgbDisabled,
					CustomID: fmt.Sprintf("–°–æ–∑–¥–∞—Ç—å –†–æ–ª—å %v", operation),
					Emoji:    discordgo.ComponentEmoji{ID: emojiId},
				})
			}
			btnsRoleCreate = append(btnsRoleCreate, &discordgo.Button{
				Label:    "‚†Ä‚†Ä‚†Ä>>‚†Ä‚†Ä‚†Ä‚†Ä",
				Style:    discordgo.SuccessButton,
				Disabled: false,
				CustomID: "–°–æ–∑–¥–∞—Ç—å –°—Ä–æ–∫–†–æ–ª—å",
				Emoji:    discordgo.ComponentEmoji{Name: "‚úîÔ∏è"},
			})
			var rgb int = (red << 16) | (green << 8) | blue
			openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
				Title:       "–†–æ–ª–∏",
				Color:       rgb,
				Description: "*–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–≤–µ—Ç –¥–ª—è —Ä–æ–ª–∏, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É—è—Å—å —Ü–≤–µ—Ç–æ–≤–æ–π –º–æ–¥–µ–ª—å—é [RGB](https://www.google.com/search?q=–í—ã–±–æ—Ä+–¶–≤–µ—Ç–∞).*\n\n*–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ü–≤–µ—Ç —Ä–æ–ª–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —Å–ª–µ–≤–∞, –≤ –≤–∏–¥–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏.*",
				Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/858704257402404904/icon_role_create.png"},
				Fields: []*discordgo.MessageEmbedField{
					{
						Name:   "üî¥",
						Value:  fmt.Sprintf("`%v`", red),
						Inline: true,
					},
					{
						Name:   "üü¢",
						Value:  fmt.Sprintf("`%v`", green),
						Inline: true,
					},
					{
						Name:   "üîµ",
						Value:  fmt.Sprintf("`%v`", blue),
						Inline: true,
					},
				}}, btnsRoleCreate, CreateRolePanel)
		} else if strings.Contains(customId, "–°–æ–∑–¥–∞—Ç—å –°—Ä–æ–∫–†–æ–ª—å") {
			randImage := randSlice([]string{
				"https://cdn.discordapp.com/attachments/838477787877998624/859026312710848512/time.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859026322214617088/time2.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859026326123315200/time3.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859026276803411968/time4.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859026278647595018/time5.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859026291138887700/time7.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859026297380536360/time8.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859026300265431040/time9.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859026304190775316/time10.gif",
			})

			createRoleUsers = append(createRoleUsers, CreateRoleUser{UserId: userId, RoleColor: i.Message.Embeds[0].Color})

			createRoleButtonOneDayDisabled, createRoleButtonThreeDaysDisabled, createRoleButtonSevenDaysDisabled, createRoleButtonOneMouthDisabled := true, true, true, true
			isEnoughCurrency, balance, err := b.isEnoughCurrency(userId, 1500)
			if err != nil {
				s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user balance")
				return
			}
			if isEnoughCurrency {
				createRoleButtonOneDayDisabled = false
			}
			if balance > 3900 {
				createRoleButtonThreeDaysDisabled = false
			}
			if balance > 8100 {
				createRoleButtonSevenDaysDisabled = false
			}
			if balance > 30000 {
				createRoleButtonOneMouthDisabled = false
			}

			openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
				Title:       "–†–æ–ª–∏",
				Description: "*–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∫–∞—Å—Ç–æ–º–Ω—É—é —Ä–æ–ª—å.*",
				Image:       &discordgo.MessageEmbedImage{URL: randImage},
				Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/858704257402404904/icon_role_create.png"},
			}, []*discordgo.Button{{
				Label:    "‚†Ä1 –¥.‚†Ä|‚†Ä1500 —Ç.",
				Style:    discordgo.SuccessButton,
				Disabled: createRoleButtonOneDayDisabled,
				CustomID: "–°–æ–∑–¥–∞—Ç—å –ò–º—è–†–æ–ª—å 1",
				Emoji:    discordgo.ComponentEmoji{ID: "858694330075185182"},
			}, {
				Label:    "‚†Ä3 –¥.‚†Ä| 3900 —Ç.",
				Style:    discordgo.SuccessButton,
				Disabled: createRoleButtonThreeDaysDisabled,
				CustomID: "–°–æ–∑–¥–∞—Ç—å –ò–º—è–†–æ–ª—å 3",
				Emoji:    discordgo.ComponentEmoji{ID: "858694330075185182"},
			}, {
				Label:    "‚†Ä7 –¥.‚†Ä|‚†Ä8100 —Ç.",
				Style:    discordgo.SuccessButton,
				Disabled: createRoleButtonSevenDaysDisabled,
				CustomID: "–°–æ–∑–¥–∞—Ç—å –ò–º—è–†–æ–ª—å 7",
				Emoji:    discordgo.ComponentEmoji{ID: "858694330075185182"},
			}, {
				Label:    "‚†Ä1 –º.‚†Ä|‚†Ä30000 —Ç.",
				Style:    discordgo.SuccessButton,
				Disabled: createRoleButtonOneMouthDisabled,
				CustomID: "–°–æ–∑–¥–∞—Ç—å –ò–º—è–†–æ–ª—å 31",
				Emoji:    discordgo.ComponentEmoji{ID: "858694330075185182"},
			},
			}, DefaultPanel)
		} else if strings.Contains(customId, "–°–æ–∑–¥–∞—Ç—å –ò–º—è–†–æ–ª—å") {
			dur, _ := strconv.Atoi(customId[strings.LastIndex(customId, " ")+1:])
			for i := 0; i < len(createRoleUsers); i++ {
				if createRoleUsers[i].UserId == userId {
					createRoleUsers[i].Duration = int64(dur) * dayAsSec
					break
				}
			}
			openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
				Title:       "–†–æ–ª–∏",
				Color:       i.Message.Embeds[0].Color,
				Description: "*–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–º—è –¥–ª—è —Ä–æ–ª–∏.*\n\n**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n\n> *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤:* `100`\n\n> *–ö–∞—Å—Ç–æ–º–Ω—ã–µ —ç–º–æ–¥–∑–∏ –Ω–µ –ø—Ä–∏–µ–º–ª–µ–º—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –∏ —Å–∏–º–≤–æ–ª—ã [–Æ–Ω–∏–∫–æ–¥–∞](https://unicode-table.com/ru/).*\n\n*–û–∂–∏–¥–∞—é –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–∏, –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.*",
				Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/858704257402404904/icon_role_create.png"},
			}, nil, DefaultPanel)

		} else if strings.Contains(customId, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ü–∞–∫–æ–≤") {
			randImage := randSlice([]string{
				"https://cdn.discordapp.com/attachments/838477787877998624/854813534302109756/buy_pack.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/854813570457927691/pack_open1.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/854813535879430154/buy_pack2.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/854813535892275210/buy_pack3.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/854813531127676938/buy_pack4.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/854813532902260806/buy_pack6.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/854813531399520256/buy_pack7.gif",
			})

			packsAmount, _ := strconv.Atoi(customId[strings.LastIndex(customId, " ")+1:])
			err := b.MarketData.LootboxAdd(userId, packsAmount, b.Cfg.LootboxPrice)
			if err != nil {
				s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to update user's lootbox amount")
				return
			}
			b.openPackPanel(s, i, &discordgo.MessageEmbed{
				Description: "*–ö–æ–≥–¥–∞ –±—Ä–∞—Ç–∏–∫ –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å, –µ–º—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–≤–µ–∑—ë—Ç!*",
				Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/854114891311874048/icon_lootbox_hq.png"},
				Image:       &discordgo.MessageEmbedImage{URL: randImage},
			})
		} else if strings.Contains(customId, "–ö—É–ø–∏—Ç—å –†–æ–ª—å") || strings.Contains(customId, "–ü—Ä–æ–¥–ª–∏—Ç—å –†–æ–ª—å") {
			randImage := randSlice([]string{
				"https://cdn.discordapp.com/attachments/838477787877998624/859026312710848512/time.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859026322214617088/time2.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859026326123315200/time3.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859026276803411968/time4.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859026278647595018/time5.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859026291138887700/time7.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859026297380536360/time8.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859026300265431040/time9.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859026304190775316/time10.gif",
			})

			productDial, _ := strconv.Atoi(customId[strings.LastIndex(customId, " ")+1:])
			product, err := b.MarketData.Product(productDial)
			if err != nil {
				s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get info about product")
				return
			}

			buyRoleButtonOneDayDisabled, buyRoleButtonThreeDaysDisabled, buyRoleButtonSevenDaysDisabled, buyRoleButtonOneMouthDisabled := true, true, true, true
			isEnoughCurrency, balance, err := b.isEnoughCurrency(userId, 500)
			if err != nil {
				s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user balance")
				return
			}
			if isEnoughCurrency {
				buyRoleButtonOneDayDisabled = false
			}
			if balance > 1300 {
				buyRoleButtonThreeDaysDisabled = false
			}
			if balance > 2700 {
				buyRoleButtonSevenDaysDisabled = false
			}
			if balance > 10000 {
				buyRoleButtonOneMouthDisabled = false
			}

			buyOrExtend := customId[:strings.Index(customId, " ")+1]
			description := "*–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ä–æ–ª—å.*"
			if strings.Contains(buyOrExtend, "–ü—Ä–æ–¥–ª–∏—Ç—å") {
				description = "*–í—ã–±–µ—Ä–∏—Ç–µ, –Ω–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å —Ä–æ–ª—å.*"
			}

			openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
				Title:       "–†–æ–ª–∏",
				Description: fmt.Sprintf("%v\n\n> **–†–æ–ª—å:**\n\n<@&%v>\n", description, product.RoleID),
				Image:       &discordgo.MessageEmbedImage{URL: randImage},
				Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/858764424160608306/icon_role_buy.png"},
			}, []*discordgo.Button{{
				Label:    "‚†Ä1 –¥.‚†Ä|‚†Ä500 —Ç.",
				Style:    discordgo.SuccessButton,
				Disabled: buyRoleButtonOneDayDisabled,
				CustomID: fmt.Sprintf("%v–°—Ä–æ–∫ –†–æ–ª—å %v|1", buyOrExtend, productDial),
				Emoji:    discordgo.ComponentEmoji{ID: "858763110285574154"},
			}, {
				Label:    "‚†Ä3 –¥.‚†Ä|‚†Ä1300 —Ç.",
				Style:    discordgo.SuccessButton,
				Disabled: buyRoleButtonThreeDaysDisabled,
				CustomID: fmt.Sprintf("%v–°—Ä–æ–∫ –†–æ–ª—å %v|3", buyOrExtend, productDial),
				Emoji:    discordgo.ComponentEmoji{ID: "858763110285574154"},
			}, {
				Label:    "‚†Ä7 –¥.‚†Ä|‚†Ä2700 —Ç.",
				Style:    discordgo.SuccessButton,
				Disabled: buyRoleButtonSevenDaysDisabled,
				CustomID: fmt.Sprintf("%v–°—Ä–æ–∫ –†–æ–ª—å %v|7", buyOrExtend, productDial),
				Emoji:    discordgo.ComponentEmoji{ID: "858763110285574154"},
			}, {
				Label:    "‚†Ä1 –º.‚†Ä|‚†Ä10000 —Ç.",
				Style:    discordgo.SuccessButton,
				Disabled: buyRoleButtonOneMouthDisabled,
				CustomID: fmt.Sprintf("%v–°—Ä–æ–∫ –†–æ–ª—å %v|31", buyOrExtend, productDial),
				Emoji:    discordgo.ComponentEmoji{ID: "858763110285574154"},
			},
			}, DefaultPanel)
		} else if strings.Contains(customId, "–°—Ä–æ–∫ –†–æ–ª—å") {
			randImage := randSlice([]string{
				"https://cdn.discordapp.com/attachments/838477787877998624/858703916555698196/role.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/858703919718989844/role1.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/858703921458970645/role2.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/858703924038598686/role3.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/858703925662056508/role4.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/858704180276625438/role6.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/858703907211706388/role7.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/858703908607361024/role8.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/858703909321441290/role9.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/858703914077519872/role10.gif",
			})

			dialAndDur := customId[strings.LastIndex(customId, " ")+1:]
			productDial, _ := strconv.Atoi(dialAndDur[:strings.Index(dialAndDur, "|")])
			productDurDays, _ := strconv.Atoi(dialAndDur[strings.Index(dialAndDur, "|")+1:])
			product, err := b.MarketData.Product(productDial)
			if err != nil {
				s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get info about product")
				return
			}

			switch productDurDays {
			case 1:
				product.Price = 500
			case 3:
				product.Price = 1300
			case 7:
				product.Price = 2700
			case 31:
				product.Price = 10000
			}

			err = b.MarketData.Order(userId, product, int64(productDurDays)*dayAsSec)
			if err != nil {
				s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to order product")
				return
			}

			buyOrExtend := customId[:strings.Index(customId, " ")+1]
			description := fmt.Sprintf("*–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–æ–≤–∞—è —Ä–æ–ª—å ‚Äî\n\n<@&%v> –Ω–∞ `%v` –¥.*\n\n*–°–≤–µ—Ä–∫–∞–π—Ç–µ –µ—é, –∫–∞–∫ –Ω–∏–∫–æ–≥–¥–∞.*", product.RoleID, productDurDays)
			if strings.Contains(buyOrExtend, "–ü—Ä–æ–¥–ª–∏—Ç—å") {
				description = fmt.Sprintf("*–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø—Ä–æ–¥–ª–∏–ª–∏ —Å–≤–æ—é —Ä–æ–ª—å ‚Äî\n\n<@&%v> –Ω–∞ `%v` –¥.*\n\n*–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—ë –≤—Å–µ–º.*", product.RoleID, productDurDays)
			}

			openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
				Title:       "–†–æ–ª–∏",
				Description: description,
				Image:       &discordgo.MessageEmbedImage{URL: randImage},
				Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/858764424160608306/icon_role_buy.png"},
			}, nil, DefaultPanel)

			err = b.roleGive(s, i.GuildID, userId, product.RoleID)
			if err != nil {
				s.ChannelMessageSend(b.Cfg.AlertChannel, "Error giving role")
				return
			}
		} else if strings.Contains(customId, "–†–µ–∞–∫—Ü–∏—è") {

			randImage := randSlice([]string{
				"https://cdn.discordapp.com/attachments/838477787877998624/859433907014860830/reaction.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859433917207937034/reaction1.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859433850107461692/reaction2.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859433857082327051/reaction3.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859433861107941416/reaction4.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859433873267097620/reaction5.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859433877528903711/reaction6.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859433881471811614/reaction7.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859433889473495043/reaction8.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859433895531773972/reaction9.gif",
				"https://cdn.discordapp.com/attachments/838477787877998624/859433903969402920/reaction10.gif",
			})

			productDial, _ := strconv.Atoi(customId[strings.LastIndex(customId, " ")+1:])

			product, err := b.MarketData.Product(productDial)
			if err != nil {
				s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get info about product")
				return
			}

			err = b.MarketData.Order(userId, product, -1)
			if err != nil {
				s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to order product")
				return
			}

			openCustomPanel(s, i, discordgo.InteractionResponseUpdateMessage, &discordgo.MessageEmbed{
				Title:       "–†–µ–∞–∫—Ü–∏–∏",
				Description: fmt.Sprintf("*–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–µ–ø–µ—Ä—å —É –≤–∞—Å –≤ –Ω–∞–ª–∏—á–∏–∏ –Ω–æ–≤–∞—è —Ä–µ–∞–∫—Ü–∏—è ‚Äî\n\n%v `%v` –Ω–∞–≤—Å–µ–≥–¥–∞!*\n\n*–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø—ã—Ç–∞—Ç—å –Ω–∞ –∫–æ–º-–Ω–∏–±—É–¥—å.*", b.Cfg.EmojiReaction, product.Name),
				Image:       &discordgo.MessageEmbedImage{URL: randImage},
				Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/859160231376453652/icon_reaction_buy.png"},
			}, nil, DefaultPanel)
		}
	}
}

// OnGuildMemberJoined registers a member when they join the guild. If member rejoined, would reassign roles owned by them.
func (b *Bot) OnGuildMemberJoined(s *discordgo.Session, m *discordgo.GuildMemberAdd) {
	userId := m.User.ID
	err := b.MarketData.CustomerAdd(userId)
	if err != nil {
		s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to add user to the database")
		return
	}

	is, err := b.MarketData.UserOrders(userId)
	if err != nil {
		s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user's items")
	}

	for _, i := range is {
		if i.Product.Type == "role" {
			err = b.roleGive(s, m.GuildID, userId, i.Product.RoleID)
			if err != nil {
				s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to assign role to a user")
				return
			}
		}
	}

	textChannelId, _, roleId, _, _ := b.MarketData.HasCustomerChannels(userId)
	if textChannelId != "" {
		err = s.GuildMemberRoleAdd(m.GuildID, userId, roleId)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to assign role to a user")
			return
		}
		err = s.GuildMemberRoleAdd(m.GuildID, userId, "836937639831142401")
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Error adding role")
			return
		}
	}
}

// OnGuildMemberVoiceUpd tracks user's voice activity and adds currency to the balance.
// Amount depends on the voice farm rate.
func (b *Bot) OnGuildMemberVoiceUpd(s *discordgo.Session, m *discordgo.VoiceStateUpdate) {
	ID := m.UserID
	user, err := s.GuildMember(b.Cfg.GuildID, ID)
	if err != nil {
		s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get user info")
		return
	}

	if user.User.Bot {
		return
	}

	if m.BeforeUpdate == nil {
		t := time.Now().Unix()
		err := b.MarketData.VoiceLogAdd(ID, t)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to insert voice log")
		}
		return
	}

	if m.ChannelID == "" {
		t, err := b.MarketData.VoiceLogGetAndClean(ID)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to sweep voice log")
			return
		}

		deltaM := time.Since(time.Unix(t, 0))
		farmed := int(deltaM.Minutes()) / b.Cfg.VoiceDelta * b.Cfg.VoiceRate
		err = b.MarketData.BalanceUpdate(ID, farmed)
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to update user's balance")
			return
		}

		err = b.MarketData.CustomerTotalVoiceUpdate(ID, int64(deltaM.Seconds()))
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to update user's total voice time")
			return
		}
	}
}

// SweepExpiredOrders removes expired orders from the database and unassignes expired roles from the users.
func (b *Bot) SweepExpiredOrders(s *discordgo.Session, quit chan struct{}) {
	t := time.NewTicker(30 * time.Second)
	go func() {
		for {
			select {
			case <-t.C:
				textChannels, voiceChannels, rolesDelete, usersID, err := b.MarketData.CustomerChannelsExpired()
				if err != nil {
					s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to delete expired channels")
					return
				}
				for _, v := range textChannels {
					ch, err := s.Channel(v)
					if err != nil {
						s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to get channel from guild")
						return
					}
					_, err = s.ChannelDelete(ch.ParentID)
					if err != nil {
						s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to delete channel from guild")
						return
					}
					_, err = s.ChannelDelete(v)
					if err != nil {
						s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to delete channel from guild")
						return
					}
				}
				for _, v := range voiceChannels {
					_, err = s.ChannelDelete(v)
					if err != nil {
						s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to delete channel from guild")
						return
					}
				}
				for _, v := range rolesDelete {
					err = s.GuildRoleDelete(b.Cfg.GuildID, v)
					if err != nil {
						s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to remove role from the user")
						return
					}
				}
				for _, v := range usersID {
					b.roleSweepDelimiters(s, b.Cfg.GuildID, v)
					if err != nil {
						s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to remove delimeter from the user")
						return
					}
				}
				es, err := b.MarketData.OrdersDeleteExpired()
				if err != nil {
					s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to perform sweep and get expired roles")
					return
				}
				var u []string
				for _, e := range es {

					for _, v := range u {
						if v != e.UserID {
							u = append(u, e.UserID)
						}
					}

					err = s.GuildMemberRoleRemove(b.Cfg.GuildID, e.UserID, e.RoleID)
					if err != nil {
						s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to remove role from the user")
					}
				}

				for _, userID := range u {
					b.roleSweepDelimiters(s, b.Cfg.GuildID, userID)
				}

			case <-quit:
				t.Stop()
				return
			}
		}
	}()
}

// uRIP gets all user roles beetwen specified positions.
func uRIP(s *discordgo.Session, guildID, userID, lowID, highID string) (discordgo.Roles, error) {
	var r discordgo.Roles
	g, err := s.Guild(guildID)
	if err != nil {
		return r, err
	}

	sort.Slice(g.Roles, func(i, j int) bool {
		return g.Roles[i].Position <= g.Roles[j].Position
	})

	var rolesInRegion discordgo.Roles
	inBound := false
	for _, role := range g.Roles {
		if role.ID == highID {
			break
		}

		if inBound {
			rolesInRegion = append(rolesInRegion, role)

		}
		if role.ID == lowID {
			inBound = true
		}
	}

	gm, err := s.GuildMember(guildID, userID)
	if err != nil {
		return r, err
	}

	for _, roleID := range gm.Roles {
		for _, role := range rolesInRegion {
			if role.ID == roleID {
				r = append(r, role)
			}
		}
	}
	return r, nil
}

func (b *Bot) isEnoughCurrency(userID string, comparedProductPrice int) (bool, int, error) {
	balance, err := b.MarketData.Balance(userID)
	if err != nil {
		return false, balance, err
	}
	if balance < comparedProductPrice {
		return false, balance, nil
	}
	return true, balance, nil
}

// LotteryInit initializes lottery and makes it run periodically in a goroutine.
func (b *Bot) LotteryInit(s *discordgo.Session, quit chan struct{}) {

	if b.LotterySession != nil && len(b.LotterySession.Participants) != 0 {

		randImage := randSlice([]string{
			"https://cdn.discordapp.com/attachments/838477787877998624/908317282227347536/winner.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/908317277865275452/winner2.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/908317273893249044/winner3.gif",
			"https://cdn.discordapp.com/attachments/838477787877998624/908317277634560060/winner4.gif",
		})

		randWinner := randSlice(b.LotterySession.Participants)
		b.MarketData.BalanceUpdate(randWinner, len(b.LotterySession.Participants)*b.Cfg.LotteryPrice)

		s.ChannelMessageSendEmbed(b.Cfg.LotteryChannelID,
			&discordgo.MessageEmbed{
				Color:       3092790,
				Title:       "–õ–æ—Ç–µ—Ä–µ—è",
				Image:       &discordgo.MessageEmbedImage{URL: randImage},
				Thumbnail:   &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/849718749275619428/icon_ticket.png"},
				Description: fmt.Sprintf("*–Æ—Ö—Ö—É—É!* üéâ\n\n<@!%v> –≤—ã–∏–≥—Ä–∞–ª –≤ –ª–æ—Ç–µ—Ä–µ–µ, —Å—Ç–∞–≤ –æ–±–ª–∞–¥–∞—Ç–µ–ª–µ–º `%v` —á–∏—Å—Ç—ã—Ö —Ç—Ä—É—Å–∏–∫–æ–≤ %v", randWinner, len(b.LotterySession.Participants)*b.Cfg.LotteryPrice, b.Cfg.Currency),
			})
	}

	t := time.NewTicker(12 * time.Hour)

	b.LotterySession = &Lottery{Participants: []string{}, Expires: time.Now().Add(time.Hour * 12)}
	s.ChannelMessageSendEmbed(b.Cfg.LotteryChannelID,
		&discordgo.MessageEmbed{
			Color:     3092790,
			Title:     "–õ–æ—Ç–µ—Ä–µ—è",
			Image:     &discordgo.MessageEmbedImage{URL: "https://cdn.discordapp.com/attachments/838477787877998624/861645967702491136/AhegaoLottery.gif"},
			Thumbnail: &discordgo.MessageEmbedThumbnail{URL: "https://cdn.discordapp.com/attachments/838477787877998624/849718749275619428/icon_ticket.png"},
			Description: fmt.Sprintf("```–õ–æ—Ç–µ—Ä–µ–π–Ω—ã–µ –±–∏–ª–µ—Ç –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å –≤ —Ä–∞–∑–¥–µ–ª–µ \"–ú–∞—Ä–∫–µ—Ç\".```\n*–£ —Ç–µ–±—è –µ—Å—Ç—å 12 —á–∞—Å–æ–≤, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç.*\n\n*–ü–æ—Ç–æ—Ä–æ–ø–∏—Å—å, %v –≤—Å–µ–≥–æ `10`.*",
				b.Cfg.EmojiLottery),
		})

	go func() {
		for {
			select {
			case <-t.C:
				t.Stop()
				b.LotteryInit(s, quit)
				return
			case <-quit:
				t.Stop()
				return
			}
		}
	}()
}

// roleGive assigns the role to the user and gives the delitmeter role.
func (b *Bot) roleGive(s *discordgo.Session, guildID, userID, roleID string) error {
	err := s.GuildMemberRoleAdd(guildID, userID, roleID)
	if err != nil {
		s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to assign the role to the user")
		return err
	}

	err = s.GuildMemberRoleAdd(guildID, userID, "839970605724860416") // Delitmiter role
	if err != nil {
		s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to assign the delimiter role to the user")
		return err
	}
	return nil
}

// roleSweepDelimiters removes the delimiter role if user doesn't have any roles belonging to the delimiter region.
func (b *Bot) roleSweepDelimiters(s *discordgo.Session, guildID, userID string) {

	rs, err := uRIP(s, guildID, userID, "839970605724860416", "834432874945839160")
	if err != nil {
		s.ChannelMessageSend(b.Cfg.AlertChannel, "uRIP failed")
		return
	}
	if len(rs) < 1 {
		err := s.GuildMemberRoleRemove(guildID, userID, "839970605724860416") //Delitmiter role
		if err != nil {
			s.ChannelMessageSend(b.Cfg.AlertChannel, "Unable to remove the delimiter role to the user")
			return
		}
	}
}

// randSlice returns random element form the slice.
func randSlice(s []string) string {
	rand.Seed(time.Now().UnixNano())
	n := rand.Intn(len(s))
	return s[n]
}
